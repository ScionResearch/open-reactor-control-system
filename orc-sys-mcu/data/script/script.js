function getDashboardIconSVG(){return'<svg viewBox="0 0 24 24"><path d="M21,16V4H3V16H21M21,2A2,2 0 0,1 23,4V16A2,2 0 0,1 21,18H14V20H16V22H8V20H10V18H3C1.89,18 1,17.1 1,16V4C1,2.89 1.89,2 3,2H21M5,6H14V11H5V6M15,6H19V8H15V6M19,9V14H15V9H19M5,12H9V14H5V12M10,12H14V14H10V12Z" /></svg>'}function getConfigIconSVG(){return'<svg viewBox="0 0 24 24"><path d="M5,3C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19H5V5H12V3H5M17.78,4C17.61,4 17.43,4.07 17.3,4.2L16.08,5.41L18.58,7.91L19.8,6.7C20.06,6.44 20.06,6 19.8,5.75L18.25,4.2C18.12,4.07 17.95,4 17.78,4M15.37,6.12L8,13.5V16H10.5L17.87,8.62L15.37,6.12Z" /></svg>'}function openTab(e,t){for(var n=document.getElementsByClassName("tab-content"),o=0;o<n.length;o++)n[o].classList.remove("active");var a=document.getElementsByClassName("tab-link");for(o=0;o<a.length;o++)a[o].classList.remove("active");document.getElementById(t).classList.add("active"),e.currentTarget.classList.add("active"),"system"===t?updateSystemStatus():"filemanager"===t?initFileManager():"control"===t?initControlBoard():"inputs"===t?initInputsTab():"outputs"===t?initOutputsTab():"comports"===t?initComPortsTab():"devices"===t?"function"==typeof initDevicesTab&&initDevicesTab():"sensors"===t?initSensorsTab():"controllers"===t&&"function"==typeof initControllersTab&&initControllersTab()}function updateLiveClock(){const e=document.getElementById("liveClock");if(e){const t=new Date;e.textContent=t.toLocaleString()}}document.addEventListener("DOMContentLoaded",function(){[{id:"calibrate-save",fields:["calibrate-offset","calibrate-scale"]},{id:"analog-save",fields:["analog-value"]},{id:"digital-save",fields:["digital-state","digital-pin"]},{id:"sensor-temp-save",fields:["sensor-temp"]},{id:"sensor-ph-save",fields:["sensor-ph"]},{id:"sensor-od-save",fields:["sensor-od"]},{id:"sensor-flow-save",fields:["sensor-flow"]},{id:"sensor-pressure-save",fields:["sensor-pressure"]},{id:"sensor-power-save",fields:["sensor-power"]},{id:"analog-output-save",fields:["analog-output"]},{id:"digital-output-save",fields:["digital-output-state","digital-output-pin"]},{id:"stepper-save",fields:["stepper-position","stepper-speed"]},{id:"motor-save",fields:["motor-rpm","motor-direction"]},{id:"rs232-save",fields:["rs232-port","rs232-baud"]},{id:"rs485-save",fields:["rs485-port","rs485-baud"]}].forEach(e=>{const t=document.getElementById(e.id);t&&t.addEventListener("click",function(){const t={};e.fields.forEach(e=>{const n=document.getElementById(e);n&&("checkbox"===n.type?t[e]=n.checked:(n.tagName,t[e]=n.value))}),console.log(`[${e.id}]`,t),showToast("info","Saved",`Settings for ${e.id.replace("-save","").replace(/-/g," ")} updated.`)})})});let currentPath="/",fileManagerActive=!1,sdStatusInterval=null;const initFileManager=()=>{if(!document.getElementById("filemanager"))return;fileManagerActive=!0;const e=document.getElementById("file-list-items"),t=document.getElementById("path-navigator"),n=document.getElementById("sd-status");function o(){fileManagerActive&&fetch("/api/system/status").then(e=>e.json()).then(o=>{if(o.sd.inserted){o.sd.ready&&o.sd.capacityGB?n.innerHTML=`<div class="status-good">SD Card Ready - ${o.sd.freeSpaceGB.toFixed(2)} GB free of ${o.sd.capacityGB.toFixed(2)} GB</div>`:n.innerHTML='<div class="status-info">SD Card inserted</div>';const t=e.querySelector(".error-message");t&&t.textContent.includes("not inserted")&&a(currentPath)}else n.innerHTML='<div class="status-error">SD Card not inserted</div>',e.innerHTML='<div class="error-message">SD Card is not inserted. Please insert an SD card to view files.</div>',t.innerHTML=""}).catch(e=>{console.error("Error checking SD status:",e)})}function a(n,o=0){e.innerHTML='<div class="loading">Loading files...</div>',function(e){t.innerHTML="";const n=e.split("/").filter(e=>""!==e),o=document.createElement("span");o.className="path-part",o.textContent="Root",o.onclick=()=>r("/"),t.appendChild(o);let a="";n.forEach((e,o)=>{const s=document.createElement("span");s.className="path-separator",s.textContent=" / ",t.appendChild(s),a+="/"+e;const i=document.createElement("span");if(i.className="path-part",i.textContent=e,o<n.length-1){const e=a;i.onclick=()=>r(e)}t.appendChild(i)})}(n);setTimeout(()=>{fetch(`/api/sd/list?path=${encodeURIComponent(n)}`).then(t=>{if(!t.ok){if(503===t.status&&o<3){const t=1e3*(o+1);return console.log(`SD card not ready, retrying in ${t}ms (attempt ${o+1}/3)`),e.innerHTML=`<div class="loading">SD card initializing, please wait... (${o+1}/3)</div>`,setTimeout(()=>{a(n,o+1)},t),null}throw new Error(503===t.status?"SD card not ready. It may be initializing or experiencing an issue.":"Failed to list directory")}return t.json()}).then(t=>{t&&function(t){e.innerHTML="";const n=5242880;if(0===t.directories.length&&0===t.files.length)return void(e.innerHTML='<div class="empty-message">This directory is empty</div>');t.directories.forEach(t=>{const n=document.createElement("div");n.className="directory-item",n.innerHTML=`\n                <div class="file-name">${t.name}</div>\n                <div class="file-size">Directory</div>\n                <div class="file-modified">-</div>\n                <div class="file-actions"></div>\n            `,n.onclick=()=>r(t.path),e.appendChild(n)}),t.files.forEach(t=>{const o=document.createElement("div");o.className="file-item";const a=t.size>n,r=a?"download-btn disabled":"download-btn",i=a?`File is too large to download (${s(t.size)}). Maximum size is ${s(n)}.`:"Download this file";o.innerHTML=`\n                <div class="file-name" data-path="${t.path}">${t.name}</div>\n                <div class="file-size">${s(t.size)}</div>\n                <div class="file-modified">${t.modified||"-"}</div>\n                <div class="file-actions">\n                    <button class="${r}" data-path="${t.path}" title="${i}">Download</button>\n                </div>\n            `,e.appendChild(o);o.querySelector(".file-name").addEventListener("click",e=>{e.stopPropagation();!function(e){const t=`/api/sd/view?path=${encodeURIComponent(e)}`;window.open(t,"_blank")}(e.target.getAttribute("data-path"))});const l=o.querySelector(".download-btn");a||l.addEventListener("click",e=>{e.stopPropagation();!function(e){const t=e.split("/").pop(),n=`/api/sd/download?path=${encodeURIComponent(e)}`,o=document.createElement("a");o.href=n,o.download=t,o.setAttribute("download",t),document.body.appendChild(o),o.click(),document.body.removeChild(o)}(e.target.getAttribute("data-path"))})})}(t)}).catch(t=>{console.error("Error loading directory:",t),e.innerHTML=`\n                        <div class="error-message">\n                            ${t.message||"Failed to load directory contents"}\n                            ${o>=3?'<div class="retry-action"><button id="retryButton" class="download-btn">Retry</button></div>':""}\n                        </div>\n                    `;const s=document.getElementById("retryButton");s&&s.addEventListener("click",()=>{a(n,0)})})},0===o?500:0)}function s(e){if(0===e)return"0 B";const t=Math.floor(Math.log(e)/Math.log(1024));return parseFloat((e/Math.pow(1024,t)).toFixed(2))+" "+["B","KB","MB","GB","TB"][t]}function r(e){currentPath=e,a(e)}function i(){fileManagerActive&&fetch("/api/system/status").then(e=>e.json()).then(o=>{o.sd&&o.sd.inserted&&o.sd.ready?a(currentPath):o.sd&&o.sd.inserted?(n.innerHTML='<div class="status-info">SD Card initializing, please wait...</div>',setTimeout(i,1500)):(n.innerHTML='<div class="status-error">SD Card not inserted</div>',e.innerHTML='<div class="error-message">SD Card is not inserted. Please insert an SD card to view files.</div>',t.innerHTML="")}).catch(e=>{console.error("Error checking SD status:",e),setTimeout(i,2e3)})}o(),sdStatusInterval&&clearInterval(sdStatusInterval),sdStatusInterval=setInterval(o,3e3),o=()=>{fileManagerActive&&fetch("/api/system/status").then(e=>e.json()).then(o=>{if(o.sd.inserted){if(o.sd.ready&&o.sd.capacityGB){n.innerHTML=`<div class="status-good">SD Card Ready - ${o.sd.freeSpaceGB.toFixed(2)} GB free of ${o.sd.capacityGB.toFixed(2)} GB</div>`;e.querySelector(".loading")&&a(currentPath)}else n.innerHTML='<div class="status-info">SD Card inserted</div>';const t=e.querySelector(".error-message");t&&t.textContent.includes("not inserted")&&i()}else n.innerHTML='<div class="status-error">SD Card not inserted</div>',e.innerHTML='<div class="error-message">SD Card is not inserted. Please insert an SD card to view files.</div>',t.innerHTML=""}).catch(e=>{console.error("Error checking SD status:",e)})},i()};document.querySelectorAll("nav a").forEach(e=>{e.addEventListener("click",e=>{e.preventDefault();const t=e.target.dataset.page;document.querySelectorAll(".page").forEach(e=>e.classList.remove("active")),document.querySelector(`#${t}`).classList.add("active"),document.querySelectorAll("nav a").forEach(e=>e.classList.remove("active")),e.target.classList.add("active"),"system"===t?updateSystemStatus():"filemanager"===t&&initFileManager()})});let sensorHistory={temp:[],ph:[],do:[],stirrer:[]},sensorDataUpdating=!1;async function updateSensorData(){if(!sensorDataUpdating){sensorDataUpdating=!0;try{const e=await fetch("/api/sensors");if(!e.ok){if(404===e.status)return void updateSensorPlaceholders();throw new Error(`HTTP ${e.status}: ${e.statusText}`)}const t=e.headers.get("content-type");if(!t||!t.includes("application/json"))throw new Error("Response is not JSON");const n=await e.json();if(void 0!==n.temp){const e=document.getElementById("temp-reading"),t=document.getElementById("current-temp");if(e){const t=parseFloat(e.textContent)||0;e.textContent=n.temp.toFixed(1),updateTrend("temp-trend",n.temp,t),sensorHistory.temp.push(n.temp),sensorHistory.temp.length>50&&sensorHistory.temp.shift()}t&&(t.textContent=n.temp.toFixed(1)+" Â°C")}if(void 0!==n.ph){const e=document.getElementById("ph-reading"),t=document.getElementById("current-ph");if(e){const t=parseFloat(e.textContent)||0;e.textContent=n.ph.toFixed(2),updateTrend("ph-trend",n.ph,t),sensorHistory.ph.push(n.ph),sensorHistory.ph.length>50&&sensorHistory.ph.shift()}t&&(t.textContent=n.ph.toFixed(2))}if(void 0!==n.do){const e=document.getElementById("do-reading"),t=document.getElementById("current-do");if(e){const t=parseFloat(e.textContent)||0;e.textContent=n.do.toFixed(1),updateTrend("do-trend",n.do,t),sensorHistory.do.push(n.do),sensorHistory.do.length>50&&sensorHistory.do.shift()}t&&(t.textContent=n.do.toFixed(1)+"%")}if(void 0!==n.stirrer){const e=document.getElementById("stirrer-reading"),t=document.getElementById("current-stirrer-rpm");e&&(e.textContent=n.stirrer.toFixed(0),sensorHistory.stirrer.push(n.stirrer),sensorHistory.stirrer.length>50&&sensorHistory.stirrer.shift()),t&&(t.textContent=n.stirrer.toFixed(0)+" RPM")}if(void 0!==n.gasFlow){const e=document.getElementById("current-gasflow");e&&(e.textContent=n.gasFlow.toFixed(1)+" mL/min")}if(void 0!==n.pressure){const e=document.getElementById("current-pressure");e&&(e.textContent=n.pressure.toFixed(1)+" kPa")}if(void 0!==n.weight){const e=document.getElementById("current-weight");e&&(e.textContent=n.weight.toFixed(1)+" g")}if(void 0!==n.opticalDensity){const e=document.getElementById("current-od");e&&(e.textContent=n.opticalDensity.toFixed(3)+" OD")}if(void 0!==n.powerVolts){const e=document.getElementById("current-power-volts");e&&(e.textContent=n.powerVolts.toFixed(1)+" V")}if(void 0!==n.powerAmps){const e=document.getElementById("current-power-amps");e&&(e.textContent=n.powerAmps.toFixed(2)+" A")}if(void 0!==n.powerWatts){const e=document.getElementById("current-power-watts");e&&(e.textContent=n.powerWatts.toFixed(1)+" W")}const o=document.getElementById("lastUpdate");o&&(o.textContent=(new Date).toLocaleString())}catch(e){console.error("Error updating sensor data:",e),updateSensorPlaceholders()}finally{sensorDataUpdating=!1}}}function updateSensorPlaceholders(){const e=document.getElementById("temp-reading");e&&(e.textContent="--");const t=document.getElementById("ph-reading");t&&(t.textContent="--");const n=document.getElementById("do-reading");n&&(n.textContent="--");const o=document.getElementById("stirrer-reading");o&&(o.textContent="--");const a=document.getElementById("current-temp");a&&(a.textContent="-- Â°C");const s=document.getElementById("current-ph");s&&(s.textContent="--");const r=document.getElementById("current-do");r&&(r.textContent="--%");const i=document.getElementById("current-stirrer-rpm");i&&(i.textContent="-- RPM");const l=document.getElementById("current-gasflow");l&&(l.textContent="-- mL/min");const d=document.getElementById("current-pressure");d&&(d.textContent="-- kPa");const c=document.getElementById("current-weight");c&&(c.textContent="-- g");const u=document.getElementById("current-od");u&&(u.textContent="-- OD");const m=document.getElementById("current-power-volts");m&&(m.textContent="-- V");const p=document.getElementById("current-power-amps");p&&(p.textContent="-- A");const g=document.getElementById("current-power-watts");g&&(g.textContent="-- W")}function updateInputStates(){const e=document.getElementById("enableNTP").checked,t=document.getElementById("currentDate"),n=document.getElementById("currentTime");t&&n&&(t.disabled=e,n.disabled=e)}async function loadInitialSettings(){try{const e=await fetch("/api/time"),t=await e.json();if(t){if(t.date&&(document.getElementById("currentDate").value=t.date),t.time){const e=t.time.substring(0,5);document.getElementById("currentTime").value=e}document.getElementById("enableNTP").checked=t.ntpEnabled,document.getElementById("enableDST").checked=t.dst,document.getElementById("timezone").value=t.timezone,updateInputStates()}}catch(e){console.error("Error loading initial settings:",e)}}async function loadNetworkSettings(){try{const e=await fetch("/api/network"),t=await e.json();if(console.log("Network settings received:",t),t){const e=document.getElementById("ipConfig");e&&(e.value=t.mode,e.dispatchEvent(new Event("change"))),document.getElementById("ipAddress").value=t.ip||"",document.getElementById("subnetMask").value=t.subnet||"",document.getElementById("gateway").value=t.gateway||"",document.getElementById("dns").value=t.dns||"";const n=document.getElementById("macAddress");n&&(n.textContent=t.mac||"Unknown");const o=document.getElementById("currentIP");o&&(o.textContent=t.ip||"Unknown"),document.getElementById("hostName").value=t.hostname||"",document.getElementById("ntpServer").value=t.ntp||""}}catch(e){console.error("Error loading network settings:",e)}}async function loadMqttSettings(){try{const e=await fetch("/api/mqtt"),t=await e.json();document.getElementById("mqttBroker").value=t.mqttBroker||"",document.getElementById("mqttPort").value=t.mqttPort||"1883",document.getElementById("mqttUsername").value=t.mqttUsername||"",document.getElementById("mqttPassword").value=t.mqttPassword||""}catch(e){console.error("Error loading MQTT settings:",e)}}async function loadControlSettings(){try{console.log("Loading control settings...")}catch(e){console.error("Error loading control settings:",e)}}async function saveControlSettings(e){const t=document.getElementById(`${e}-setpoint`).value,n=document.getElementById(`${e}-enabled`).checked;let o={setpoint:parseFloat(t),enabled:n};"temp"!==e&&"do"!==e&&"stirrer"!==e||(o.kp=parseFloat(document.getElementById(`${e}-kp`).value),o.ki=parseFloat(document.getElementById(`${e}-ki`).value),o.kd=parseFloat(document.getElementById(`${e}-kd`).value)),"ph"===e&&(o.period=parseFloat(document.getElementById("ph-period").value),o.maxDoseTime=parseFloat(document.getElementById("ph-max-dose").value));const a=showToast("info","Saving...",`Updating ${e} control settings`,5e3);try{console.log(`Saving ${e} control settings:`,o),await new Promise(e=>setTimeout(e,1e3)),a.parentNode&&a.parentNode.removeChild(a),showToast("success","Success",`${e.toUpperCase()} control settings saved successfully`)}catch(t){console.error(`Error saving ${e} control settings:`,t),a.parentNode&&a.parentNode.removeChild(a),showToast("error","Error",`Failed to save ${e} control settings`)}}async function saveTimeSettings(){console.log("Save time settings called");try{const e=document.getElementById("currentDate").value,t=document.getElementById("currentTime").value,n=document.getElementById("timezone").value,o=document.getElementById("enableNTP").checked,a=document.getElementById("enableDST").checked;if(!(o||e&&t))return void showToast("error","Validation Error","Please provide both date and time for manual time setting");const s={date:e,time:t,timezone:n,ntpEnabled:o,dstEnabled:a};console.log("Sending time settings:",s);const r=await fetch("/api/time",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)});if(!r.ok){const e=await r.json().catch(()=>({error:"Unknown error"}));throw new Error(e.error||"Failed to save time settings")}showToast("success","Success",(await r.json()).message||"Time settings saved successfully"),await loadInitialSettings()}catch(e){console.error("Error saving time settings:",e),showToast("error","Error",e.message||"Failed to save time settings")}}function updateNetworkInfo(){console.log("Network info update called")}function updateTrend(e,t,n){console.log("Trend update called for",e,"new:",t,"old:",n)}document.addEventListener("DOMContentLoaded",async()=>{await loadInitialSettings(),await loadNetworkSettings(),await loadMqttSettings(),loadControlSettings(),updateLiveClock(),updateSensorData(),updateNetworkInfo();const e=document.querySelector("#system");e&&e.classList.contains("active")&&updateSystemStatus();const t=document.getElementById("enableNTP");t&&t.addEventListener("change",updateInputStates);const n=document.getElementById("saveTimeBtn");n&&n.addEventListener("click",saveTimeSettings);const o=document.getElementById("ipConfig");if(o){const e=()=>{const e=document.getElementById("staticSettings");e&&(e.style.display="static"===o.value?"block":"none")};o.addEventListener("change",e),e()}document.querySelectorAll(".control-btn").forEach(e=>{e.addEventListener("click",function(e){saveControlSettings(e.target.id.split("-")[0])})});const a=document.querySelector("#control");a&&a.classList.contains("active")&&initControlBoard()}),setInterval(updateLiveClock,1e3),setInterval(updateSensorData,5e3),setInterval(updateNetworkInfo,1e4);let systemStatusUpdating=!1;async function updateSystemStatus(){if(!systemStatusUpdating){systemStatusUpdating=!0;try{const e=await fetch("/api/system/status");if(!e.ok){if(404===e.status)return void updateSystemStatusPlaceholders();throw new Error(`HTTP ${e.status}: ${e.statusText}`)}const t=e.headers.get("content-type");if(!t||!t.includes("application/json"))throw new Error("Response is not JSON");const n=await e.json();if(n.power){const e=document.getElementById("mainVoltage");e&&(e.textContent=n.power.mainVoltage.toFixed(1)+"V");const t=document.getElementById("mainVoltageStatus");t&&(t.textContent=n.power.mainVoltageOK?"OK":"OUT OF RANGE",t.className="status "+(n.power.mainVoltageOK?"ok":"error"));const o=document.getElementById("v20Voltage");o&&(o.textContent=n.power.v20Voltage.toFixed(1)+"V");const a=document.getElementById("v20VoltageStatus");a&&(a.textContent=n.power.v20VoltageOK?"OK":"OUT OF RANGE",a.className="status "+(n.power.v20VoltageOK?"ok":"error"));const s=document.getElementById("v5Voltage");s&&(s.textContent=n.power.v5Voltage.toFixed(1)+"V");const r=document.getElementById("v5VoltageStatus");r&&(r.textContent=n.power.v5VoltageOK?"OK":"OUT OF RANGE",r.className="status "+(n.power.v5VoltageOK?"ok":"error"))}if(n.rtc){const e=document.getElementById("rtcStatus");e&&(e.textContent=n.rtc.ok?"OK":"ERROR",e.className="status "+(n.rtc.ok?"ok":"error"));const t=document.getElementById("rtcTime");t&&(t.textContent=n.rtc.time)}const o=document.getElementById("ipcStatus");o&&(o.textContent=n.ipc?"OK":"ERROR",o.className="status "+(n.ipc?"ok":"error"));const a=document.getElementById("mqttStatus");a&&(a.textContent=n.mqtt?"CONNECTED":"NOT-CONNECTED",a.className="status "+(n.mqtt?"connected":"not-connected"));const s=document.getElementById("modbusStatus");if(s&&(s.textContent=n.modbus?"CONNECTED":"NOT-CONNECTED",s.className="status "+(n.modbus?"connected":"not-connected")),n.sd){const e=document.getElementById("sdStatus");if(e)if(n.sd.inserted)if(n.sd.ready){e.textContent="OK",e.className="status ok";const t=document.getElementById("sdCapacityContainer"),o=document.getElementById("sdFreeSpaceContainer"),a=document.getElementById("sdLogSizeContainer"),s=document.getElementById("sdSensorSizeContainer");t&&(t.style.display="flex"),o&&(o.style.display="flex"),a&&(a.style.display="flex"),s&&(s.style.display="flex");const r=document.getElementById("sdCapacity");r&&(r.textContent=n.sd.capacityGB.toFixed(1)+" GB");const i=document.getElementById("sdFreeSpace");i&&(i.textContent=n.sd.freeSpaceGB.toFixed(1)+" GB");const l=document.getElementById("sdLogSize");l&&(l.textContent=n.sd.logFileSizeKB.toFixed(1)+" kB");const d=document.getElementById("sdSensorSize");d&&(d.textContent=n.sd.sensorFileSizeKB.toFixed(1)+" kB")}else e.textContent="ERROR",e.className="status error",hideSDDetails();else e.textContent="NOT INSERTED",e.className="status warning",hideSDDetails()}}catch(e){console.error("Error updating system status:",e),updateSystemStatusPlaceholders()}finally{systemStatusUpdating=!1}}}function updateSystemStatusPlaceholders(){const e=document.getElementById("mainVoltage");e&&(e.textContent="--V");const t=document.getElementById("v20Voltage");t&&(t.textContent="--V");const n=document.getElementById("v5Voltage");n&&(n.textContent="--V");["mainVoltageStatus","v20VoltageStatus","v5VoltageStatus","rtcStatus","ipcStatus","mqttStatus","modbusStatus","sdStatus"].forEach(e=>{const t=document.getElementById(e);t&&(t.textContent="API UNAVAILABLE",t.className="status warning")});const o=document.getElementById("rtcTime");o&&(o.textContent="--"),hideSDDetails()}function hideSDDetails(){document.getElementById("sdCapacityContainer").style.display="none",document.getElementById("sdFreeSpaceContainer").style.display="none",document.getElementById("sdLogSizeContainer").style.display="none",document.getElementById("sdSensorSizeContainer").style.display="none"}function updateStatusIfSystemTabActive(){document.querySelector("#system").classList.contains("active")&&updateSystemStatus()}function showToast(e,t,n,o=3e3){const a=document.getElementById("toastContainer"),s=document.createElement("div");s.className=`toast toast-${e}`;let r="";switch(e){case"success":r="â";break;case"error":r="â";break;default:r="â¹"}return s.innerHTML=`\n        <div class="toast-icon">${r}</div>\n        <div class="toast-content">\n            <div class="toast-title">${t}</div>\n            <div class="toast-message">${n}</div>\n        </div>\n    `,a.appendChild(s),setTimeout(()=>{s.classList.add("toast-exit"),setTimeout(()=>{s.parentNode&&a.removeChild(s)},300)},o),s}setInterval(updateStatusIfSystemTabActive,5e3),document.querySelectorAll('nav a[data-page="system"]').forEach(e=>{e.addEventListener("click",()=>{updateSystemStatus()})}),document.getElementById("networkForm").addEventListener("submit",async function(e){e.preventDefault();const t=document.getElementById("networkStatus");if(t.textContent="",t.className="","static"===document.getElementById("ipConfig").value){const e=["ipAddress","subnetMask","gateway","dns"];for(const t of e){if(!document.getElementById(t).checkValidity())return void showToast("error","Validation Error",`Invalid ${t.replace(/([A-Z])/g," $1").toLowerCase()}`)}}const n={mode:document.getElementById("ipConfig").value,ip:document.getElementById("ipAddress").value,subnet:document.getElementById("subnetMask").value,gateway:document.getElementById("gateway").value,dns:document.getElementById("dns").value,hostname:document.getElementById("hostName").value,ntp:document.getElementById("ntpServer").value,dst:document.getElementById("enableDST").checked},o=showToast("info","Saving...","Updating network settings",1e4);try{const e=await fetch("/api/network",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)});o.parentNode&&o.parentNode.removeChild(o);const t=await e.json();if(e.ok){showToast("success","Success","Network settings saved. The device will restart to apply changes...",5e3);setTimeout(()=>{window.location.reload()},5e3)}else showToast("error","Error",t.error||"Failed to save network settings")}catch(e){o.parentNode&&o.parentNode.removeChild(o),showToast("error","Network Error",e.message||"Failed to connect to the server")}}),document.getElementById("mqttForm").addEventListener("submit",async e=>{e.preventDefault();const t={mqttBroker:document.getElementById("mqttBroker").value,mqttPort:parseInt(document.getElementById("mqttPort").value)||1883,mqttUsername:document.getElementById("mqttUsername").value,mqttPassword:document.getElementById("mqttPassword").value},n=showToast("info","Saving...","Updating MQTT settings",1e4);try{const e=await fetch("/api/mqtt",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(n.parentNode&&n.parentNode.removeChild(n),!e.ok)throw new Error("Failed to save MQTT settings");showToast("success","Success","MQTT settings saved successfully")}catch(e){console.error("Error saving MQTT settings:",e),n.parentNode&&n.parentNode.removeChild(n),showToast("error","Error","Failed to save MQTT settings")}}),document.addEventListener("DOMContentLoaded",()=>{const e=document.getElementById("rebootButton"),t=document.getElementById("rebootModal"),n=document.getElementById("cancelReboot"),o=document.getElementById("confirmReboot");e&&e.addEventListener("click",()=>{t.classList.add("active")}),n&&n.addEventListener("click",()=>{t.classList.remove("active")}),o&&o.addEventListener("click",async()=>{try{o.textContent="Rebooting...",o.disabled=!0;if(!(await fetch("/api/system/reboot",{method:"POST",headers:{"Content-Type":"application/json"}})).ok)throw new Error("Failed to reboot system");{t.classList.remove("active"),showToast("info","System Rebooting","The system is rebooting. This page will be unavailable for a few moments.");let e=12;const n=document.createElement("div");n.className="reconnect-message",n.innerHTML=`<p>Reconnecting in <span id="countdown">${e}</span> seconds...</p>`,document.body.appendChild(n);const o=setInterval(()=>{e--,document.getElementById("countdown").textContent=e,e<=0&&(clearInterval(o),window.location.reload())},1e3)}}catch(e){console.error("Error rebooting system:",e),showToast("error","Reboot Failed","Failed to reboot the system. Please try again."),o.textContent="Yes, Reboot",o.disabled=!1,t.classList.remove("active")}})}),document.addEventListener("DOMContentLoaded",()=>{const e=document.querySelector('a[data-page="filemanager"]');e&&e.addEventListener("click",()=>{fileManagerActive=!0,initFileManager()}),document.querySelectorAll('nav a:not([data-page="filemanager"])').forEach(e=>{e.addEventListener("click",()=>{fileManagerActive=!1,sdStatusInterval&&(clearInterval(sdStatusInterval),sdStatusInterval=null)})}),document.querySelector("#filemanager.active")&&(fileManagerActive=!0,initFileManager())});const CONTROL_LS_KEYS={order:"orc.control.order",visibility:"orc.control.visibility"},PARAM_REGISTRY=[{id:"temp",name:"Temperature",kind:"pid",units:"Â°C",min:0,max:100,step:.1,read:{method:"GET",url:"/api/demo/temp"},write:{method:"POST",url:"/api/demo/temp"}},{id:"ph",name:"pH",kind:"doser",units:"",min:0,max:14,step:.01,read:{method:"GET",url:"/api/demo/ph"},write:{method:"POST",url:"/api/demo/ph"}},{id:"do",name:"Dissolved Oxygen",kind:"pid",units:"%",min:0,max:100,step:1,read:{method:"GET",url:"/api/demo/do"},write:{method:"POST",url:"/api/demo/do"}},{id:"stirrer",name:"Stirrer Speed",kind:"pid",units:"RPM",min:0,max:2e3,step:10,read:{method:"GET",url:"/api/demo/stirrer"},write:{method:"POST",url:"/api/demo/stirrer"}},{id:"gasflow",name:"Gas Flow",kind:"setpoint",units:"mL/min",min:0,max:1e3,step:10,read:{method:"GET",url:"/api/demo/gasflow"},write:{method:"POST",url:"/api/demo/gasflow"}},{id:"pump1",name:"Pump 1 (Acid)",kind:"toggle",units:"",read:{method:"GET",url:"/api/demo/pump1"},write:{method:"POST",url:"/api/demo/pump1"}},{id:"pump2",name:"Pump 2 (Base)",kind:"toggle",units:"",read:{method:"GET",url:"/api/demo/pump2"},write:{method:"POST",url:"/api/demo/pump2"}},{id:"pressure",name:"Pressure",kind:"readOnly",units:"kPa",read:{method:"GET",url:"/api/demo/pressure"}},{id:"weight",name:"Weight",kind:"readOnly",units:"g",read:{method:"GET",url:"/api/demo/weight"}},{id:"od",name:"Optical Density",kind:"readOnly",units:"OD",read:{method:"GET",url:"/api/demo/od"}},{id:"pwrV",name:"Power (Volts)",kind:"readOnly",units:"V",read:{method:"GET",url:"/api/demo/power/volts"}},{id:"pwrA",name:"Power (Amps)",kind:"readOnly",units:"A",read:{method:"GET",url:"/api/demo/power/amps"}},{id:"pwrW",name:"Power (Watts)",kind:"readOnly",units:"W",read:{method:"GET",url:"/api/demo/power/watts"}}];let controlBoardInitialized=!1,controlPollTimer=null;function initControlBoard(){if(controlBoardInitialized)return;controlBoardInitialized=!0;const e=document.getElementById("controlBoard");if(!e)return;const t=loadVisibility(),n=loadOrder(),o=Object.fromEntries(PARAM_REGISTRY.map(e=>[e.id,e])),a=n&&n.length?n.filter(e=>o[e]):PARAM_REGISTRY.map(e=>e.id);for(const n of a){const a=o[n];!1!==t[n]&&e.appendChild(renderParamCard(a))}setupDragAndDrop(e),setupCustomizeUI(),setupFilterUI(),startControlPolling()}function renderParamCard(e){const t=document.createElement("div");if(t.className="param-card",t.setAttribute("draggable","true"),t.dataset.paramId=e.id,t.innerHTML=`\n        <div class="param-card-header">\n            <div class="param-card-title">${e.name}</div>\n            <div class="param-card-actions">\n                <button class="icon-btn" title="Drag" aria-label="Drag to reorder">â¡</button>\n            </div>\n        </div>\n        <div class="param-card-body">${getParamBodyHTML(e)}</div>\n        ${"readOnly"!==e.kind?'<div class="param-footer"><button class="btn-tiny" data-action="save">Save</button></div>':""}\n    `,"readOnly"!==e.kind){t.querySelector('[data-action="save"]').addEventListener("click",()=>saveParam(e,t))}return t}function getParamBodyHTML(e){const t=e.id,n=n=>`<input type="number" id="${t}-${n}" step="${e.step??1}" ${null!=e.min?`min="${e.min}"`:""} ${null!=e.max?`max="${e.max}"`:""}>`,o=(e,n=!1)=>`<label class="switch"><input type="checkbox" id="${t}-${e}" ${n?"checked":""}><span class="slider"></span></label>`;switch(e.kind){case"pid":return`\n                <div class="param-row"><label>Current</label><div><span id="${t}-current">--</span> ${e.units}</div></div>\n                <div class="param-row"><label>Setpoint</label><div>${n("setpoint")} ${e.units}</div></div>\n                <div class="pid-params">\n                    <div class="form-group"><label>Kp</label>${n("kp")}</div>\n                    <div class="form-group"><label>Ki</label>${n("ki")}</div>\n                    <div class="form-group"><label>Kd</label>${n("kd")}</div>\n                </div>\n                <div class="param-row"><label>Enabled</label><div>${o("enabled",!0)}</div></div>\n            `;case"doser":return`\n                <div class="param-row"><label>Current</label><div><span id="${t}-current">--</span> ${e.units}</div></div>\n                <div class="param-row"><label>Setpoint</label><div>${n("setpoint")}</div></div>\n                <div class="param-row"><label>Period (s)</label><div>${n("period")}</div></div>\n                <div class="param-row"><label>Max Dose (s)</label><div>${n("maxDose")}</div></div>\n                <div class="param-row"><label>Enabled</label><div>${o("enabled")}</div></div>\n            `;case"setpoint":return`\n                <div class="param-row"><label>Current</label><div><span id="${t}-current">--</span> ${e.units}</div></div>\n                <div class="param-row"><label>Setpoint</label><div>${n("setpoint")} ${e.units}</div></div>\n                <div class="param-row"><label>Enabled</label><div>${o("enabled")}</div></div>\n            `;case"toggle":return`\n                <div class="param-row"><label>Status</label><div><span id="${t}-current">--</span></div></div>\n                <div class="param-row"><label>Enabled</label><div>${o("enabled")}</div></div>\n            `;default:return`\n                <div class="param-row"><label>Value</label><div><span id="${t}-current">--</span> ${e.units}</div></div>\n            `}}function setupDragAndDrop(e){let t=null;e.addEventListener("dragstart",e=>{const n=e.target.closest(".param-card");n&&(t=n,n.classList.add("dragging"),e.dataTransfer.effectAllowed="move")}),e.addEventListener("dragend",n=>{const o=n.target.closest(".param-card");o&&o.classList.remove("dragging"),t=null,saveOrder(e)}),e.addEventListener("dragover",n=>{n.preventDefault();const o=getDragAfterElement(e,n.clientY);null==o?e.appendChild(t):e.insertBefore(t,o)})}function getDragAfterElement(e,t){return[...e.querySelectorAll(".param-card:not(.dragging)")].reduce((e,n)=>{const o=n.getBoundingClientRect(),a=t-o.top-o.height/2;return a<0&&a>e.offset?{offset:a,element:n}:e},{offset:Number.NEGATIVE_INFINITY}).element}function saveOrder(e){const t=[...e.querySelectorAll(".param-card")].map(e=>e.dataset.paramId);localStorage.setItem(CONTROL_LS_KEYS.order,JSON.stringify(t))}function loadOrder(){try{return JSON.parse(localStorage.getItem(CONTROL_LS_KEYS.order))||[]}catch{return[]}}function loadVisibility(){try{return JSON.parse(localStorage.getItem(CONTROL_LS_KEYS.visibility))||{}}catch{return{}}}function saveVisibility(e){localStorage.setItem(CONTROL_LS_KEYS.visibility,JSON.stringify(e))}function setupCustomizeUI(){const e=document.getElementById("customizeControlBtn"),t=document.getElementById("controlCustomizeModal"),n=document.getElementById("closeCustomize"),o=document.getElementById("saveCustomize"),a=document.getElementById("selectAllParams"),s=document.getElementById("clearAllParams"),r=document.getElementById("resetLayout"),i=document.getElementById("paramVisibilityList");if(!e||!t||!i)return;const l=()=>t.classList.remove("active");e.addEventListener("click",()=>{i.innerHTML="";const e=loadVisibility();PARAM_REGISTRY.forEach(t=>{const n=document.createElement("div");n.className="param-toggle",n.innerHTML=`\n                <input type="checkbox" id="vis-${t.id}" ${!1!==e[t.id]?"checked":""}/>\n                <label class="name" for="vis-${t.id}">${t.name}</label>\n                <span class="desc">${t.kind}</span>\n            `,i.appendChild(n)}),t.classList.add("active")}),n.addEventListener("click",l),o.addEventListener("click",()=>{const e={};PARAM_REGISTRY.forEach(t=>{const n=document.getElementById(`vis-${t.id}`);e[t.id]=!n||n.checked}),saveVisibility(e),rerenderControlBoard(),l()}),a.addEventListener("click",()=>{i.querySelectorAll('input[type="checkbox"]').forEach(e=>e.checked=!0)}),s.addEventListener("click",()=>{i.querySelectorAll('input[type="checkbox"]').forEach(e=>e.checked=!1)}),r.addEventListener("click",()=>{localStorage.removeItem(CONTROL_LS_KEYS.order),rerenderControlBoard()})}function setupFilterUI(){const e=document.getElementById("controlSearch"),t=document.getElementById("controlBoard");e&&t&&e.addEventListener("input",()=>{const n=e.value.trim().toLowerCase();t.querySelectorAll(".param-card").forEach(e=>{const t=e.querySelector(".param-card-title")?.textContent?.toLowerCase()||"";e.style.display=t.includes(n)?"":"none"})})}function rerenderControlBoard(){const e=document.getElementById("controlBoard");e&&(e.innerHTML="",controlBoardInitialized=!1,initControlBoard())}async function saveParam(e,t){const n=n=>{const o=t.querySelector(`#${e.id}-${n}`);return o&&""!==o.value?Number(o.value):void 0};let o={};["pid","doser","setpoint"].includes(e.kind)&&(o.setpoint=n("setpoint")),"pid"===e.kind&&(o.kp=n("kp"),o.ki=n("ki"),o.kd=n("kd")),"doser"===e.kind&&(o.period=n("period"),o.maxDose=n("maxDose")),"readOnly"!==e.kind&&(o.enabled=(n=>{const o=t.querySelector(`#${e.id}-${n}`);return o?o.checked:void 0})("enabled"));const a=showToast("info","Saving...",`Updating ${e.name}`,5e3);try{const t=await fetch(e.write.url,{method:e.write.method,headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!t.ok)throw new Error(`HTTP ${t.status}`);a.parentNode&&a.parentNode.removeChild(a),showToast("success","Saved",`${e.name} updated`)}catch(n){console.warn("Demo endpoint likely missing, simulating success:",n.message),a.parentNode&&a.parentNode.removeChild(a),showToast("success","Saved (Demo)",`${e.name} updated locally`);const s=t.querySelector(`#${e.id}-current`);s&&null!=o.setpoint&&(s.textContent=o.setpoint)}}function startControlPolling(){controlPollTimer&&clearInterval(controlPollTimer);const e=async()=>{const e=document.getElementById("controlBoard");if(e&&document.getElementById("control").classList.contains("active"))for(const t of PARAM_REGISTRY){const n=e.querySelector(`#${t.id}-current`);if(n&&t.read)try{const e=await fetch(t.read.url);if(!e.ok)throw new Error("not ok");const o=await e.json().catch(()=>({})),a=null!=o.value?o.value:null!=o.current?o.current:void 0;null!=a&&(n.textContent="number"==typeof a?a.toString():a)}catch{}}};e(),controlPollTimer=setInterval(e,4e3)}let inputsRefreshInterval=null,sensorsRefreshInterval=null;function initInputsTab(){inputsRefreshInterval&&clearInterval(inputsRefreshInterval),fetchAndRenderInputs(),inputsRefreshInterval=setInterval(()=>{document.getElementById("inputs").classList.contains("active")?fetchAndRenderInputs():(clearInterval(inputsRefreshInterval),inputsRefreshInterval=null)},2e3)}function initSensorsTab(){sensorsRefreshInterval&&clearInterval(sensorsRefreshInterval),fetchAndRenderInputs(),sensorsRefreshInterval=setInterval(()=>{document.getElementById("sensors").classList.contains("active")?fetchAndRenderInputs():(clearInterval(sensorsRefreshInterval),sensorsRefreshInterval=null)},2e3)}async function fetchAndRenderInputs(){try{const e=await fetch("/api/inputs");if(!e.ok)throw new Error("Failed to fetch inputs");const t=await e.json();console.log("Inputs data received:",t),console.log("  ADC:",t.adc?t.adc.length:0,"entries"),console.log("  RTD:",t.rtd?t.rtd.length:0,"entries"),console.log("  GPIO:",t.gpio?t.gpio.length:0,"entries"),console.log("  Energy:",t.energy?t.energy.length:0,"entries"),console.log("  Devices:",t.devices?t.devices.length:0,"entries"),renderADCInputs(t.adc||[]),renderRTDInputs(t.rtd||[]),renderGPIOInputs(t.gpio||[]),renderEnergySensors(t.energy||[]),renderDeviceSensors(t.devices||[])}catch(e){console.error("Error fetching inputs:",e),showInputError("adc-list"),showInputError("rtd-list"),showInputError("gpio-list"),showInputError("energy-list"),showInputError("device-sensors-list")}}function renderADCInputs(e){const t=document.getElementById("adc-list");t&&(0!==e.length?t.innerHTML=e.map(e=>`\n        <div class="input-item ${e.f?"fault":""}">\n            <div class="input-header">\n                <div class="input-header-left">\n                    <span class="input-name">${e.n||`ADC ${e.i}`}</span>\n                    <span class="input-value-inline">\n                        <span class="value-large">${e.v.toFixed(2)}</span>\n                        <span class="value-unit">${e.u}</span>\n                    </span>\n                </div>\n                <span class="dashboard-icon ${e.d?"active":"inactive"}" title="${e.d?"Shown on Dashboard":"Hidden from Dashboard"}">\n                    ${getDashboardIconSVG()}\n                </span>\n                <button class="icon-btn" onclick="openADCConfigModal(${e.i})" title="Configure">\n                    ${getConfigIconSVG()}\n                </button>\n            </div>\n            ${e.f?'<div class="fault-indicator">FAULT</div>':""}\n        </div>\n    `).join(""):t.innerHTML='<div class="empty-message">No ADC data available</div>')}function renderRTDInputs(e){const t=document.getElementById("rtd-list");t&&(0!==e.length?t.innerHTML=e.map(e=>`\n        <div class="input-item ${e.f?"fault":""}">\n            <div class="input-header">\n                <div class="input-header-left">\n                    <span class="input-name">${e.n||"RTD "+(e.i-9)}</span>\n                    <span class="input-value-inline">\n                        <span class="value-large">${e.v.toFixed(2)}</span>\n                        <span class="value-unit">${e.u}</span>\n                    </span>\n                </div>\n                <span class="dashboard-icon ${e.d?"active":"inactive"}" title="${e.d?"Shown on Dashboard":"Hidden from Dashboard"}">\n                    ${getDashboardIconSVG()}\n                </span>\n                <button class="icon-btn" onclick="openRTDConfigModal(${e.i})" title="Configure">\n                    ${getConfigIconSVG()}\n                </button>\n            </div>\n            ${e.f?'<div class="fault-indicator">FAULT</div>':""}\n        </div>\n    `).join(""):t.innerHTML='<div class="empty-message">No RTD data available</div>')}function renderGPIOInputs(e){const t=document.getElementById("gpio-list");t&&(0!==e.length?t.innerHTML=e.map(e=>{const t="number"!=typeof e.i||isNaN(e.i)?"?":e.i-12,n=e.n||`Input ${t}`;return`\n            <div class="input-item ${e.f?"fault":""}">\n                <div class="input-header">\n                    <div class="input-header-left">\n                        <span class="input-name">${n}</span>\n                        <span class="input-value-inline">\n                            <span class="digital-state ${e.s?"state-high":"state-low"}">\n                                ${e.s?"HIGH":"LOW"}\n                            </span>\n                        </span>\n                    </div>\n                    <span class="dashboard-icon ${e.d?"active":"inactive"}" title="${e.d?"Shown on Dashboard":"Hidden from Dashboard"}">\n                        ${getDashboardIconSVG()}\n                    </span>\n                    <button class="icon-btn" onclick="openGPIOConfigModal(${e.i})" title="Configure">\n                        ${getConfigIconSVG()}\n                    </button>\n                </div>\n                ${e.f?'<div class="fault-indicator">FAULT</div>':""}\n            </div>\n        `}).join(""):t.innerHTML='<div class="empty-message">No Input data available</div>')}function renderEnergySensors(e){const t=document.getElementById("energy-list");t&&(0!==e.length?t.innerHTML=e.map(e=>`\n        <div class="input-item energy-sensor-item ${e.f?"fault":""}">\n            <div class="input-header">\n                <div class="input-header-left">\n                    <span class="input-name">${e.n||"Energy Monitor "+(e.i-30)}</span>\n                </div>\n                <span class="dashboard-icon ${e.d?"active":"inactive"}" title="${e.d?"Shown on Dashboard":"Hidden from Dashboard"}">\n                    ${getDashboardIconSVG()}\n                </span>\n                <button class="icon-btn" onclick="openEnergySensorConfigModal(${e.i})" title="Configure">\n                    ${getConfigIconSVG()}\n                </button>\n            </div>\n            <div class="energy-values">\n                <div class="energy-value-row">\n                    <span class="energy-label">Voltage:</span>\n                    <span class="value-large">${e.v.toFixed(2)}</span>\n                    <span class="value-unit">V</span>\n                </div>\n                <div class="energy-value-row">\n                    <span class="energy-label">Current:</span>\n                    <span class="value-large">${e.c.toFixed(3)}</span>\n                    <span class="value-unit">A</span>\n                </div>\n                <div class="energy-value-row">\n                    <span class="energy-label">Power:</span>\n                    <span class="value-large">${e.p.toFixed(2)}</span>\n                    <span class="value-unit">W</span>\n                </div>\n            </div>\n            ${e.f?'<div class="fault-indicator">FAULT</div>':""}\n        </div>\n    `).join(""):t.innerHTML='<div class="empty-message">No energy monitor data available</div>')}function renderDeviceSensors(e){const t=document.getElementById("device-sensors-list");if(!t)return;if(0===e.length)return void(t.innerHTML='<div class="empty-message">No device sensors available<br><small>Create devices in the Devices tab to see their sensors here</small></div>');t.innerHTML=e.map(e=>{return`\n        <div class="input-item ${e.f?"fault":""}">\n            <div class="input-header">\n                <div class="input-header-left">\n                    <span class="input-name">${e.n||`Device Sensor ${e.i}`}</span>\n                    <span class="sensor-type-badge">${t=e.t,{0:"Analog Input",1:"Digital Input",2:"Temperature",3:"pH",4:"Dissolved Oxygen",5:"Optical Density",6:"Flow",7:"Pressure",8:"Voltage",9:"Current",10:"Power",11:"Energy"}[t]||"Sensor"}</span>\n                    <span class="input-value-inline">\n                        <span class="value-large">${e.v.toFixed(2)}</span>\n                        <span class="value-unit">${e.u}</span>\n                    </span>\n                </div>\n                <span class="dashboard-icon ${e.d?"active":"inactive"}" title="${e.d?"Shown on Dashboard":"Hidden from Dashboard"}">\n                    ${getDashboardIconSVG()}\n                </span>\n                <button class="icon-btn" onclick="openDeviceSensorConfigModal(${e.i})" title="Configure">\n                    ${getConfigIconSVG()}\n                </button>\n            </div>\n            ${e.f?'<div class="fault-indicator">FAULT</div>':""}\n        </div>\n    `;var t}).join("")}function showInputError(e){const t=document.getElementById(e);t&&(t.innerHTML='<div class="error-message">Failed to load data</div>')}let currentEnergySensorIndex=null,energySensorConfigData=null;async function openEnergySensorConfigModal(e){currentEnergySensorIndex=e;try{const t=await fetch(`/api/config/energy/${e}`);if(!t.ok)throw new Error("Failed to fetch config");energySensorConfigData=await t.json(),document.getElementById("energySensorConfigIndex").textContent=`[${e}]`,document.getElementById("energySensorConfigName").value=energySensorConfigData.name||"",document.getElementById("energySensorShowOnDashboard").checked=energySensorConfigData.showOnDashboard||!1,document.getElementById("energySensorConfigModal").classList.add("active")}catch(e){console.error("Error fetching energy sensor config:",e),showToast("error","Error","Failed to load configuration")}}function closeEnergySensorConfigModal(){document.getElementById("energySensorConfigModal").classList.remove("active"),currentEnergySensorIndex=null,energySensorConfigData=null,document.getElementById("energySensorConfigName").value=""}async function saveEnergySensorConfig(){if(null===currentEnergySensorIndex)return;const e=document.getElementById("energySensorConfigName").value,t={index:currentEnergySensorIndex,name:e,showOnDashboard:document.getElementById("energySensorShowOnDashboard").checked};try{const n=await fetch(`/api/config/energy/${currentEnergySensorIndex}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!n.ok)throw new Error("Failed to save config");await n.json();showToast("success","Success",`Configuration saved for ${e}`),closeEnergySensorConfigModal(),fetchAndRenderInputs()}catch(e){console.error("Error saving energy sensor config:",e),showToast("error","Error","Failed to save configuration")}}let currentDeviceSensorIndex=null,deviceSensorConfigData=null;async function openDeviceSensorConfigModal(e){currentDeviceSensorIndex=e;try{const t=await fetch(`/api/config/devicesensor/${e}`);if(!t.ok)throw new Error("Failed to fetch config");deviceSensorConfigData=await t.json(),document.getElementById("deviceSensorConfigIndex").textContent=`[${e}]`,document.getElementById("deviceSensorConfigName").value=deviceSensorConfigData.name||"",document.getElementById("deviceSensorShowOnDashboard").checked=deviceSensorConfigData.showOnDashboard||!1,document.getElementById("deviceSensorConfigModal").classList.add("active")}catch(e){console.error("Error fetching device sensor config:",e),showToast("error","Error","Failed to load configuration")}}function closeDeviceSensorConfigModal(){document.getElementById("deviceSensorConfigModal").classList.remove("active"),currentDeviceSensorIndex=null,deviceSensorConfigData=null,document.getElementById("deviceSensorConfigName").value=""}async function saveDeviceSensorConfig(){if(null===currentDeviceSensorIndex)return;const e={name:document.getElementById("deviceSensorConfigName").value.trim(),showOnDashboard:document.getElementById("deviceSensorShowOnDashboard").checked};try{const t=await fetch(`/api/config/devicesensor/${currentDeviceSensorIndex}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw new Error("Failed to save config");await t.json();showToast("success","Success",`Configuration saved for sensor ${currentDeviceSensorIndex}`),closeDeviceSensorConfigModal(),fetchAndRenderInputs()}catch(e){console.error("Error saving device sensor config:",e),showToast("error","Error","Failed to save configuration")}}let currentADCIndex=null,adcConfigData=null;async function openADCConfigModal(e){currentADCIndex=e;try{const t=await fetch(`/api/config/adc/${e}`);if(!t.ok)throw new Error("Failed to fetch config");adcConfigData=await t.json(),document.getElementById("adcConfigIndex").textContent=`[${e}]`,document.getElementById("adcConfigName").value=adcConfigData.name||"",document.getElementById("adcConfigUnit").value=adcConfigData.unit||"mV",document.getElementById("calScale").value=adcConfigData.cal.scale||1,document.getElementById("calOffset").value=adcConfigData.cal.offset||0,document.getElementById("resultScale").textContent=adcConfigData.cal.scale.toFixed(4),document.getElementById("resultOffset").textContent=adcConfigData.cal.offset.toFixed(2),document.getElementById("adcShowOnDashboard").checked=adcConfigData.showOnDashboard||!1,document.getElementById("adcConfigModal").classList.add("active")}catch(e){console.error("Error fetching ADC config:",e),showToast("error","Error","Failed to load configuration")}}function closeADCConfigModal(){document.getElementById("adcConfigModal").classList.remove("active"),currentADCIndex=null,adcConfigData=null,document.getElementById("adcConfigName").value="",document.getElementById("adcConfigUnit").value="mV",document.getElementById("calP1Raw").value="",document.getElementById("calP1Real").value="",document.getElementById("calP2Raw").value="",document.getElementById("calP2Real").value="",document.getElementById("calScale").value="",document.getElementById("calOffset").value="",document.getElementById("resultScale").textContent="--",document.getElementById("resultOffset").textContent="--"}async function saveADCConfig(){if(null===currentADCIndex)return;const e=document.getElementById("adcConfigName").value,t=document.getElementById("adcConfigUnit").value,n=parseFloat(document.getElementById("calScale").value)||1,o=parseFloat(document.getElementById("calOffset").value)||0,a={index:currentADCIndex,name:e,unit:t,showOnDashboard:document.getElementById("adcShowOnDashboard").checked,cal:{scale:n,offset:o}};try{const e=await fetch(`/api/config/adc/${currentADCIndex}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)});if(!e.ok)throw new Error("Failed to save config");await e.json();showToast("success","Success",`Configuration saved for ADC ${currentADCIndex}`),closeADCConfigModal(),fetchAndRenderInputs()}catch(e){console.error("Error saving ADC config:",e),showToast("error","Error","Failed to save configuration")}}function resetCalibration(){document.getElementById("calScale").value="1.0",document.getElementById("calOffset").value="0.0",document.getElementById("resultScale").textContent="1.0000",document.getElementById("resultOffset").textContent="0.00",document.getElementById("calP1Raw").value="",document.getElementById("calP1Real").value="",document.getElementById("calP2Raw").value="",document.getElementById("calP2Real").value="",showToast("info","Reset","Calibration reset to default values")}function calculateTwoPointCal(){const e=parseFloat(document.getElementById("calP1Raw").value),t=parseFloat(document.getElementById("calP1Real").value),n=parseFloat(document.getElementById("calP2Raw").value),o=parseFloat(document.getElementById("calP2Real").value);if(isNaN(e)||isNaN(t)||isNaN(n)||isNaN(o))return void showToast("error","Error","Please fill in all calibration points");if(Math.abs(n-e)<.001)return void showToast("error","Error","Displayed values must be different");const a=adcConfigData.cal.scale||1,s=adcConfigData.cal.offset||0,r={mV:.314,V:314e-6,mA:.001308333,uV:314}[adcConfigData.unit||"mV"]||.314,i=(e/r-s)/a,l=(n/r-s)/a;if(Math.abs(l-i)<.001)return void showToast("error","Error","Calculated raw values too close together");const d=t/r,c=(o/r-d)/(l-i),u=d-c*i;document.getElementById("calScale").value=c.toFixed(6),document.getElementById("calOffset").value=u.toFixed(4),document.getElementById("resultScale").textContent=c.toFixed(4),document.getElementById("resultOffset").textContent=u.toFixed(2),showToast("success","Success","Calibration calculated successfully")}let currentDACIndex=null,dacConfigData=null;async function showDACConfig(e){currentDACIndex=e;try{const t=await fetch(`/api/dac/${e}/config`);if(!t.ok)throw new Error("Failed to load DAC config");dacConfigData=await t.json(),document.getElementById("dacConfigIndex").textContent=`[${e}]`,document.getElementById("dacConfigName").value=dacConfigData.name||"",document.getElementById("calScaleDAC").value=dacConfigData.cal.scale||1,document.getElementById("calOffsetDAC").value=dacConfigData.cal.offset||0,document.getElementById("resultScaleDAC").textContent=dacConfigData.cal.scale.toFixed(4),document.getElementById("resultOffsetDAC").textContent=dacConfigData.cal.offset.toFixed(2),document.getElementById("dacShowOnDashboard").checked=dacConfigData.showOnDashboard||!1,document.getElementById("dacConfigModal").classList.add("active")}catch(e){console.error("Error loading DAC config:",e),showToast("error","Error","Failed to load DAC configuration")}}function closeDACConfigModal(){document.getElementById("dacConfigModal").classList.remove("active"),currentDACIndex=null,dacConfigData=null,document.getElementById("dacConfigName").value="",document.getElementById("calP1RawDAC").value="",document.getElementById("calP1RealDAC").value="",document.getElementById("calP2RawDAC").value="",document.getElementById("calP2RealDAC").value="",document.getElementById("calScaleDAC").value="",document.getElementById("calOffsetDAC").value="",document.getElementById("resultScaleDAC").textContent="--",document.getElementById("resultOffsetDAC").textContent="--"}async function saveDACConfig(){if(null===currentDACIndex)return;const e=document.getElementById("dacConfigName").value,t=parseFloat(document.getElementById("calScaleDAC").value)||1,n=parseFloat(document.getElementById("calOffsetDAC").value)||0,o={index:currentDACIndex,name:e,cal:{scale:t,offset:n},showOnDashboard:document.getElementById("dacShowOnDashboard").checked};try{const e=await fetch(`/api/dac/${currentDACIndex}/config`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!e.ok){const t=await e.json();throw new Error(t.error||"Failed to save config")}showToast("success","Success","DAC output configuration saved"),closeDACConfigModal(),fetchAndRenderOutputs()}catch(e){console.error("Error saving DAC config:",e),showToast("error","Error",e.message||"Failed to save configuration")}}function resetCalibrationDAC(){document.getElementById("calScaleDAC").value="1.0",document.getElementById("calOffsetDAC").value="0.0",document.getElementById("resultScaleDAC").textContent="1.0000",document.getElementById("resultOffsetDAC").textContent="0.00",document.getElementById("calP1RawDAC").value="",document.getElementById("calP1RealDAC").value="",document.getElementById("calP2RawDAC").value="",document.getElementById("calP2RealDAC").value="",showToast("info","Reset","Calibration reset to default values")}function calculateTwoPointCalDAC(){const e=parseFloat(document.getElementById("calP1RawDAC").value),t=parseFloat(document.getElementById("calP1RealDAC").value),n=parseFloat(document.getElementById("calP2RawDAC").value),o=parseFloat(document.getElementById("calP2RealDAC").value);if(isNaN(e)||isNaN(t)||isNaN(n)||isNaN(o))return void showToast("error","Error","Please fill in all calibration points");if(e===n)return void showToast("error","Error","Displayed values must be different");const a=dacConfigData.cal.scale||1,s=dacConfigData.cal.offset||0,r=(e-s)/a,i=(n-s)/a;if(r===i)return void showToast("error","Error","Invalid calibration points (same raw values)");const l=(o-t)/(i-r),d=t-l*r;document.getElementById("calScaleDAC").value=l.toFixed(6),document.getElementById("calOffsetDAC").value=d.toFixed(4),document.getElementById("resultScaleDAC").textContent=l.toFixed(4),document.getElementById("resultOffsetDAC").textContent=d.toFixed(2),showToast("success","Success","Calibration calculated successfully")}let currentRTDIndex=null,rtdConfigData=null;async function openRTDConfigModal(e){currentRTDIndex=e;try{const t=await fetch(`/api/config/rtd/${e}`);if(!t.ok)throw new Error("Failed to fetch config");rtdConfigData=await t.json(),document.getElementById("rtdConfigIndex").textContent=`[${e}]`,document.getElementById("rtdConfigName").value=rtdConfigData.name||"",document.getElementById("rtdConfigUnit").value=rtdConfigData.unit||"C",document.getElementById("rtdConfigWires").value=rtdConfigData.wires||"3",document.getElementById("rtdConfigType").value=rtdConfigData.type||"100",document.getElementById("calScaleRTD").value=rtdConfigData.cal.scale||1,document.getElementById("calOffsetRTD").value=rtdConfigData.cal.offset||0,document.getElementById("resultScaleRTD").textContent=rtdConfigData.cal.scale.toFixed(4),document.getElementById("resultOffsetRTD").textContent=rtdConfigData.cal.offset.toFixed(2),document.getElementById("rtdShowOnDashboard").checked=rtdConfigData.showOnDashboard||!1,document.getElementById("rtdConfigModal").classList.add("active")}catch(e){console.error("Error fetching RTD config:",e),showToast("error","Error","Failed to load configuration")}}function closeRTDConfigModal(){document.getElementById("rtdConfigModal").classList.remove("active"),currentRTDIndex=null,rtdConfigData=null,document.getElementById("rtdConfigName").value="",document.getElementById("rtdConfigUnit").value="C",document.getElementById("rtdConfigWires").value="3",document.getElementById("rtdConfigType").value="100",document.getElementById("calP1RawRTD").value="",document.getElementById("calP1RealRTD").value="",document.getElementById("calP2RawRTD").value="",document.getElementById("calP2RealRTD").value="",document.getElementById("calScaleRTD").value="",document.getElementById("calOffsetRTD").value="",document.getElementById("resultScaleRTD").textContent="--",document.getElementById("resultOffsetRTD").textContent="--"}async function saveRTDConfig(){if(null===currentRTDIndex)return;const e=document.getElementById("rtdConfigName").value,t=document.getElementById("rtdConfigUnit").value,n=parseInt(document.getElementById("rtdConfigWires").value),o=parseInt(document.getElementById("rtdConfigType").value),a=parseFloat(document.getElementById("calScaleRTD").value)||1,s=parseFloat(document.getElementById("calOffsetRTD").value)||0,r={index:currentRTDIndex,name:e,unit:t,wires:n,type:o,showOnDashboard:document.getElementById("rtdShowOnDashboard").checked,cal:{scale:a,offset:s}};try{const e=await fetch(`/api/config/rtd/${currentRTDIndex}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!e.ok)throw new Error("Failed to save config");await e.json();showToast("success","Success","Configuration saved for RTD "+(currentRTDIndex-9)),closeRTDConfigModal(),fetchAndRenderInputs()}catch(e){console.error("Error saving RTD config:",e),showToast("error","Error","Failed to save configuration")}}function resetCalibrationRTD(){document.getElementById("calScaleRTD").value="1.0",document.getElementById("calOffsetRTD").value="0.0",document.getElementById("resultScaleRTD").textContent="1.0000",document.getElementById("resultOffsetRTD").textContent="0.00",document.getElementById("calP1RawRTD").value="",document.getElementById("calP1RealRTD").value="",document.getElementById("calP2RawRTD").value="",document.getElementById("calP2RealRTD").value="",showToast("info","Reset","Calibration reset to default values")}function calculateTwoPointCalRTD(){const e=parseFloat(document.getElementById("calP1RawRTD").value),t=parseFloat(document.getElementById("calP1RealRTD").value),n=parseFloat(document.getElementById("calP2RawRTD").value),o=parseFloat(document.getElementById("calP2RealRTD").value);if(isNaN(e)||isNaN(t)||isNaN(n)||isNaN(o))return void showToast("error","Error","Please fill in all calibration points");if(Math.abs(n-e)<.001)return void showToast("error","Error","Displayed values must be different");const a=rtdConfigData.cal.scale||1,s=rtdConfigData.cal.offset||0,r=rtdConfigData.unit||"C";function i(e,t){return"F"===t?5*(e-32)/9:"K"===t?e-273.15:e}const l=i(e,r),d=i(t,r),c=i(n,r),u=i(o,r),m=(l-s)/a,p=(c-s)/a;if(Math.abs(p-m)<.001)return void showToast("error","Error","Calculated raw values too close together");const g=(u-d)/(p-m),v=d-g*m;document.getElementById("calScaleRTD").value=g.toFixed(6),document.getElementById("calOffsetRTD").value=v.toFixed(4),document.getElementById("resultScaleRTD").textContent=g.toFixed(4),document.getElementById("resultOffsetRTD").textContent=v.toFixed(2),showToast("success","Success","Calibration calculated successfully")}let currentGPIOIndex=null,gpioConfigData=null;async function openGPIOConfigModal(e){currentGPIOIndex=e;try{const t=await fetch(`/api/config/gpio/${e}`);if(!t.ok)throw new Error("Failed to fetch config");gpioConfigData=await t.json(),document.getElementById("gpioConfigIndex").textContent=""+(e-12),document.getElementById("gpioConfigName").value=gpioConfigData.name||"",document.getElementById("gpioConfigPullMode").value=gpioConfigData.pullMode||"1",document.getElementById("gpioShowOnDashboard").checked=gpioConfigData.showOnDashboard||!1,document.getElementById("gpioConfigModal").classList.add("active")}catch(e){console.error("Error loading GPIO config:",e),showToast("error","Error","Failed to load GPIO configuration")}}function closeGPIOConfigModal(){document.getElementById("gpioConfigModal").classList.remove("active"),currentGPIOIndex=null,gpioConfigData=null}async function saveGPIOConfig(){if(null===currentGPIOIndex)return;const e=document.getElementById("gpioConfigName").value,t=parseInt(document.getElementById("gpioConfigPullMode").value),n={index:currentGPIOIndex,name:e,pullMode:t,showOnDashboard:document.getElementById("gpioShowOnDashboard").checked,enabled:!0};try{const e=await fetch(`/api/config/gpio/${currentGPIOIndex}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)});if(!e.ok)throw new Error("Failed to save config");await e.json();showToast("success","Success","Configuration saved for Input "+(currentGPIOIndex-12)),closeGPIOConfigModal(),fetchAndRenderInputs()}catch(e){console.error("Error saving GPIO config:",e),showToast("error","Error","Failed to save configuration")}}document.addEventListener("DOMContentLoaded",function(){document.querySelectorAll(".cal-tab-btn").forEach(e=>{e.addEventListener("click",function(){const e=this.getAttribute("data-tab");document.querySelectorAll(".cal-tab-btn").forEach(e=>e.classList.remove("active")),document.querySelectorAll(".cal-tab-content").forEach(e=>e.classList.remove("active")),this.classList.add("active"),"two-point"===e?document.getElementById("twoPointCal").classList.add("active"):"direct"===e?document.getElementById("directCal").classList.add("active"):"two-point-dac"===e?document.getElementById("twoPointCalDAC").classList.add("active"):"direct-dac"===e?document.getElementById("directCalDAC").classList.add("active"):"two-point-rtd"===e?document.getElementById("twoPointCalRTD").classList.add("active"):"direct-rtd"===e&&document.getElementById("directCalRTD").classList.add("active")})}),document.getElementById("calScale").addEventListener("input",function(){const e=parseFloat(this.value)||0;document.getElementById("resultScale").textContent=e.toFixed(4)}),document.getElementById("calOffset").addEventListener("input",function(){const e=parseFloat(this.value)||0;document.getElementById("resultOffset").textContent=e.toFixed(2)}),document.getElementById("calScaleDAC").addEventListener("input",function(){const e=parseFloat(this.value)||0;document.getElementById("resultScaleDAC").textContent=e.toFixed(4)}),document.getElementById("calOffsetDAC").addEventListener("input",function(){const e=parseFloat(this.value)||0;document.getElementById("resultOffsetDAC").textContent=e.toFixed(2)}),document.getElementById("calScaleRTD").addEventListener("input",function(){const e=parseFloat(this.value)||0;document.getElementById("resultScaleRTD").textContent=e.toFixed(4)}),document.getElementById("calOffsetRTD").addEventListener("input",function(){const e=parseFloat(this.value)||0;document.getElementById("resultOffsetRTD").textContent=e.toFixed(2)})});let outputsRefreshInterval=null,activeControls=new Set,lastOutputModes=new Map,pendingCommands=new Map,stepperInputFocused=!1,dcMotorSlidersFocused=new Map,dacSlidersFocused=new Map;function initOutputsTab(){outputsRefreshInterval&&clearInterval(outputsRefreshInterval),fetchAndRenderOutputs(),outputsRefreshInterval=setInterval(()=>{document.getElementById("outputs").classList.contains("active")?fetchAndRenderOutputs():(clearInterval(outputsRefreshInterval),outputsRefreshInterval=null)},2e3)}async function fetchAndRenderOutputs(){try{const e=await fetch("/api/outputs");if(!e.ok)throw new Error("Failed to fetch outputs");const t=await e.json();console.log("Outputs data received:",t),renderDACOutputs(t.dacOutputs||[]),renderDigitalOutputs(t.digitalOutputs||[]),renderStepperMotor(t.stepperMotor),renderDCMotors(t.dcMotors||[])}catch(e){console.error("Error fetching outputs:",e),showOutputError("dac-outputs-list"),showOutputError("digital-outputs-list"),showOutputError("stepper-motor-list"),showOutputError("dc-motors-list")}}function showOutputError(e){const t=document.getElementById(e);t&&(t.innerHTML='<div class="empty-message">Error loading data</div>')}function renderDACOutputs(e){const t=document.getElementById("dac-outputs-list");if(!t)return;if(0===e.length)return void(t.innerHTML='<div class="empty-message">No DAC outputs configured</div>');!t.querySelector(".output-item")?t.innerHTML=e.map(e=>`\n            <div class="output-item" id="dac-item-${e.index}">\n                <div class="output-header">\n                    <div class="output-header-left">\n                        <span class="output-name">${e.name}</span>\n                    </div>\n                    <span class="dashboard-icon ${e.d?"active":"inactive"}" title="${e.d?"Shown on Dashboard":"Hidden from Dashboard"}">\n                        ${getDashboardIconSVG()}\n                    </span>\n                    <button class="icon-btn" onclick="showDACConfig(${e.index})" title="Configure">\n                        ${getConfigIconSVG()}\n                    </button>\n                </div>\n                <div class="output-controls">\n                    <div class="control-group">\n                        <label class="control-label">Set Value:</label>\n                        <div class="control-slider-group-full">\n                            <input type="range" \n                                   id="dac-slider-${e.index}" \n                                   min="0" \n                                   max="10240" \n                                   step="50" \n                                   value="${e.value}"\n                                   onfocus="dacSlidersFocused.set(${e.index}, true)"\n                                   onblur="dacSlidersFocused.set(${e.index}, false)"\n                                   oninput="updateDACDisplay(${e.index}, this.value)"\n                                   onchange="setDACOutputValue(${e.index}, parseFloat(this.value))">\n                            <span class="value-display" id="dac-display-${e.index}">${e.value.toFixed(0)} ${e.unit}</span>\n                        </div>\n                    </div>\n                    <div class="status-info">\n                        <span class="status-label">Actual:</span>\n                        <span id="dac-actual-${e.index}" class="status-value-compact status-synced">${e.value.toFixed(0)} ${e.unit}</span>\n                    </div>\n                </div>\n            </div>\n        `).join(""):e.forEach(e=>{const t=document.getElementById(`dac-item-${e.index}`);if(!t)return;const n=document.getElementById(`dac-slider-${e.index}`),o=document.getElementById(`dac-display-${e.index}`),a=document.getElementById(`dac-actual-${e.index}`),s=t.querySelector(".dashboard-icon");if(s&&(s.className="dashboard-icon "+(e.d?"active":"inactive"),s.title=e.d?"Shown on Dashboard":"Hidden from Dashboard"),n&&!dacSlidersFocused.get(e.index)&&(n.value=e.value,o&&(o.textContent=e.value.toFixed(0))),a){a.textContent=`${e.value.toFixed(0)} ${e.unit}`;const t=n?parseFloat(n.value):e.value,o=pendingCommands.has(`dac-${e.index}`),s=Math.abs(t-e.value)<10;a.classList.toggle("status-synced",s&&!o),a.classList.toggle("status-pending",o)}})}function updateDACDisplay(e,t){const n=document.getElementById(`dac-display-${e}`);n&&(n.textContent=parseFloat(t).toFixed(0))}async function setDACOutputValue(e,t){console.log(`[DAC] Set output ${e} to ${t} mV`),pendingCommands.set(`dac-${e}`,t);try{const n=await fetch(`/api/dac/${e}/value`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({value:t})});if(!n.ok){const e=await n.json();throw new Error(e.error||"Failed to set DAC value")}console.log(`[DAC] Command sent for output ${e}`),setTimeout(()=>{pendingCommands.delete(`dac-${e}`)},500)}catch(t){console.error("Error setting DAC output:",t),showToast(`Error: ${t.message}`,"error"),pendingCommands.delete(`dac-${e}`)}}function renderDigitalOutputs(e){const t=document.getElementById("digital-outputs-list");if(!t)return;if(0===e.length)return void(t.innerHTML='<div class="empty-message">No outputs available</div>');let n=t.children.length!==e.length;if(!n)for(const t of e){const e=lastOutputModes.get(t.index);if(void 0!==e&&e!==t.mode){n=!0,console.log(`Output ${t.index} mode changed from ${e} to ${t.mode}, forcing re-render`);break}}e.forEach(e=>{lastOutputModes.set(e.index,e.mode)}),n?t.innerHTML=e.map(e=>{const t=1===e.mode?`<div class="output-control-compact">\n                    <div class="control-slider-group">\n                        <input type="range" min="0" max="100" \n                               value="${e.value||0}" \n                               id="slider-${e.index}"\n                               data-index="${e.index}"\n                               onmousedown="markControlActive(${e.index})"\n                               oninput="updateOutputSliderDisplay(${e.index}, this.value)"\n                               onchange="setOutputValue(${e.index}, this.value); markControlInactive(${e.index})" \n                               style="flex: 1;">\n                        <span class="value-display" id="slider-display-${e.index}">${e.value.toFixed(1)||0}%</span>\n                        <span class="status-value-compact status-synced" id="slider-actual-${e.index}" data-actual="${e.value.toFixed(1)||0}">${e.value.toFixed(1)||0}%</span>\n                    </div>\n                </div>`:`<div class="output-control-compact">\n                    <label class="switch">\n                        <input type="checkbox" \n                               ${e.state?"checked":""}\n                               id="switch-${e.index}"\n                               data-index="${e.index}"\n                               onmousedown="markControlActive(${e.index})"\n                               onchange="setOutputState(${e.index}, this.checked); markControlInactive(${e.index})">\n                        <span class="slider"></span>\n                    </label>\n                    <span class="status-indicator-compact ${e.state?"status-on":"status-off"}" id="status-${e.index}">\n                        ${e.state?"â ON":"â OFF"}\n                    </span>\n                </div>`;return`\n                <div class="output-item" id="output-item-${e.index}">\n                    <div class="output-header">\n                        <div class="output-header-left">\n                            <span class="output-name">${e.name||"Output "+(e.index-20)}</span>\n                            <span class="output-mode-badge">${1===e.mode?"PWM":"ON/OFF"}</span>\n                        </div>\n                        <span class="dashboard-icon ${e.d?"active":"inactive"}" \n                              title="${e.d?"Shown on Dashboard":"Hidden from Dashboard"}">\n                            ${getDashboardIconSVG()}\n                        </span>\n                        <button class="icon-btn" onclick="openDigitalOutputConfigModal(${e.index})" title="Configure">\n                            ${getConfigIconSVG()}\n                        </button>\n                    </div>\n                    <div class="output-control">\n                        ${t}\n                    </div>\n                </div>\n            `}).join(""):e.forEach(e=>{const t=document.getElementById(`output-item-${e.index}`);if(!t)return;const n=t.querySelector(".dashboard-icon");n&&(n.className="dashboard-icon "+(e.d?"active":"inactive"),n.title=e.d?"Shown on Dashboard":"Hidden from Dashboard");const o=activeControls.has(e.index);if(1===e.mode){const t=document.getElementById(`slider-${e.index}`),n=document.getElementById(`slider-actual-${e.index}`),a=document.getElementById(`slider-display-${e.index}`),s=pendingCommands.get(e.index),r=e.value||0;!o&&t&&(s&&s!==r||(t.value=r,a&&(a.textContent=r+"%"),pendingCommands.delete(e.index))),n&&(n.textContent=r+"%",n.setAttribute("data-actual",r),n.className=s&&s!==r?"status-value-compact status-pending":"status-value-compact status-synced")}else{const t=document.getElementById(`switch-${e.index}`),n=document.getElementById(`status-${e.index}`),a=pendingCommands.get(e.index);if(!o&&t&&(void 0!==a&&a!==e.state||(t.checked=e.state,pendingCommands.delete(e.index))),n){const t=e.state?"status-on":"status-off";void 0!==a&&a!==e.state?n.className=`status-indicator-compact ${t} status-pending`:n.className=`status-indicator-compact ${t}`,n.textContent=e.state?"â ON":"â OFF"}}})}function renderStepperMotor(e){const t=document.getElementById("stepper-motor-list");if(!t)return;if(!e)return void(t.innerHTML='<div class="empty-message">Stepper motor not available</div>');if(!t.querySelector(".output-item"))t.innerHTML=`\n        <div class="output-item">\n            <div class="output-header">\n                <div class="output-header-left">\n                    <span class="output-name">${e.name||"Stepper Motor"}</span>\n                    <span class="output-status-badge ${e.running?"running":"stopped"}">\n                        ${e.running?"ENABLED":"DISABLED"}\n                    </span>\n                    <span class="output-status-badge" style="background-color: #6c757d; color: white; margin-left: 4px;">\n                        <i class="mdi ${e.direction?"mdi-axis-z-rotate-counterclockwise":"mdi-axis-z-rotate-clockwise"}"></i>\n                        ${e.direction?"FORWARD":"REVERSE"}\n                    </span>\n                </div>\n                <div class="output-header-right">\n                    <span class="dashboard-icon ${e.d?"active":"inactive"}" \n                          title="${e.d?"Shown on Dashboard":"Hidden from Dashboard"}">\n                        ${getDashboardIconSVG()}\n                    </span>\n                    <button class="icon-btn" onclick="openStepperConfigModal()" title="Configure">\n                        ${getConfigIconSVG()}\n                    </button>\n                </div>\n            </div>\n            \n            <div class="stepper-controls">\n                \x3c!-- RPM Input --\x3e\n                <div class="control-group">\n                    <label class="control-label">Target RPM (Max: ${e.maxRPM||500})</label>\n                    <div class="control-input-group">\n                        <input type="number" id="stepperRPM" min="0" max="${e.maxRPM||500}" \n                               value="${e.rpm||0}" placeholder="Enter RPM"\n                               onfocus="stepperInputFocused = true"\n                               onblur="stepperInputFocused = false">\n                        <button class="output-btn output-btn-primary output-btn-sm" onclick="setStepperRPM()">Set</button>\n                    </div>\n                </div>\n                \n                \x3c!-- Direction Buttons --\x3e\n                <div class="control-group">\n                    <div class="button-group">\n                        <button class="output-btn ${e.direction?"output-btn-primary":"output-btn-secondary"}" \n                                onclick="setStepperDirection(true)">\n                            <svg viewBox="0 0 24 24" width="16" height="16" style="vertical-align: middle; margin-right: 4px;"><path fill="currentColor" d="M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z" /></svg>\n                            Forward\n                        </button>\n                        <button class="output-btn ${e.direction?"output-btn-secondary":"output-btn-primary"}" \n                                onclick="setStepperDirection(false)">\n                            <svg viewBox="0 0 24 24" width="16" height="16" style="vertical-align: middle; margin-right: 4px;"><path fill="currentColor" d="M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z" /></svg>\n                            Reverse\n                        </button>\n                    </div>\n                </div>\n                \n                \x3c!-- Start/Stop Buttons --\x3e\n                <div class="control-group">\n                    <div class="button-group">\n                        <button class="output-btn output-btn-success output-btn-wide" onclick="startStepper()" ${e.running?"disabled":""}>\n                            <svg viewBox="0 0 24 24" width="16" height="16" style="vertical-align: middle; margin-right: 4px;"><path fill="currentColor" d="M8,5.14V19.14L19,12.14L8,5.14Z" /></svg>\n                            Enable\n                        </button>\n                        <button class="output-btn output-btn-danger output-btn-wide" onclick="stopStepper()" ${e.running?"":"disabled"}>\n                            <svg viewBox="0 0 24 24" width="16" height="16" style="vertical-align: middle; margin-right: 4px;"><path fill="currentColor" d="M18,18H6V6H18V18Z" /></svg>\n                            Disable\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `;else{const n=document.getElementById("stepperRPM");n&&!stepperInputFocused&&(n.value=e.rpm||0,n.max=e.maxRPM||500);const o=t.querySelector(".control-label");o&&(o.textContent=`Target RPM (Max: ${e.maxRPM||500})`);const a=t.querySelectorAll(".output-status-badge");a.length>=1&&(a[0].className="output-status-badge "+(e.running?"running":"stopped"),a[0].textContent=e.running?"ENABLED":"DISABLED"),a.length>=2&&(a[1].style.color="white",a[1].innerHTML=`<i class="mdi ${e.direction?"mdi-axis-z-rotate-counterclockwise":"mdi-axis-z-rotate-clockwise"}"></i> ${e.direction?"FORWARD":"REVERSE"}`);const s=t.querySelectorAll(".button-group button");s.length>=2&&(s[0].className="output-btn "+(e.direction?"output-btn-primary":"output-btn-secondary"),s[1].className="output-btn "+(e.direction?"output-btn-secondary":"output-btn-primary"));const r=t.querySelectorAll(".control-group:last-child .button-group button");r.length>=2&&(r[0].disabled=e.running,r[1].disabled=!e.running);const i=t.querySelector(".output-name");i&&(i.textContent=e.name||"Stepper Motor");const l=t.querySelector(".dashboard-icon");l&&(l.className="dashboard-icon "+(e.d?"active":"inactive"),l.title=e.d?"Shown on Dashboard":"Hidden from Dashboard")}}function renderDCMotors(e){const t=document.getElementById("dc-motors-list");if(!t)return;if(0===e.length)return void(t.innerHTML='<div class="empty-message">No DC motors available</div>');t.querySelectorAll(".output-item").length!==e.length?t.innerHTML=e.map(e=>`\n            <div class="output-item" data-motor-index="${e.index}">\n                <div class="output-header">\n                    <div class="output-header-left">\n                        <span class="output-name">${e.name||"DC Motor "+(e.index-26)}</span>\n                        <span class="output-status-badge ${e.running?"running":"stopped"}">\n                            ${e.running?"RUNNING":"STOPPED"}\n                        </span>\n                        <span class="output-status-badge" style="background-color: #6c757d; color: white; margin-left: 4px;">\n                            <i class="mdi ${e.direction?"mdi-axis-z-rotate-counterclockwise":"mdi-axis-z-rotate-clockwise"}"></i>\n                            ${e.direction?"FORWARD":"REVERSE"}\n                        </span>\n                    </div>\n                    <div class="output-header-right">\n                        <span class="dashboard-icon ${e.d?"active":"inactive"}" \n                              title="${e.d?"Shown on Dashboard":"Hidden from Dashboard"}">\n                            ${getDashboardIconSVG()}\n                        </span>\n                        <button class="icon-btn" onclick="openDCMotorConfigModal(${e.index})" title="Configure">\n                            ${getConfigIconSVG()}\n                        </button>\n                    </div>\n                </div>\n                \n                <div class="dc-motor-controls">\n                    \x3c!-- Power Control --\x3e\n                    <div class="control-group">\n                        <label class="control-label">Set Power:</label>\n                        <div class="control-slider-group-full">\n                            <input type="range" min="0" max="100" value="${e.power||0}" \n                                   id="motor-slider-${e.index}"\n                                   onfocus="dcMotorSlidersFocused.set(${e.index}, true)"\n                                   onblur="dcMotorSlidersFocused.set(${e.index}, false)"\n                                   oninput="updateMotorPowerDisplay(${e.index}, this.value)"\n                                   onchange="setDCMotorPower(${e.index}, this.value)">\n                            <span class="value-display" id="motor-power-display-${e.index}">${e.power||0}%</span>\n                        </div>\n                    </div>\n                    \n                    \x3c!-- Status Display --\x3e\n                    <div class="status-info">\n                        <span class="status-label">Power:</span>\n                        <span id="motor-actual-power-${e.index}" class="status-value-compact status-synced">${e.power||0}%</span>\n                        <span class="status-separator">â¢</span>\n                        <span class="status-label">Current:</span>\n                        <span id="motor-current-${e.index}" class="status-value-compact status-synced">${(e.current||0).toFixed(2)}A</span>\n                    </div>\n                    \n                    \x3c!-- Direction Buttons --\x3e\n                    <div class="control-group">\n                        <div class="button-group" id="motor-direction-buttons-${e.index}">\n                            <button class="output-btn ${e.direction?"output-btn-primary":"output-btn-secondary"}" \n                                    onclick="setDCMotorDirection(${e.index}, true)">\n                                <svg viewBox="0 0 24 24" width="16" height="16" style="vertical-align: middle; margin-right: 4px;"><path fill="currentColor" d="M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z" /></svg>\n                                Forward\n                            </button>\n                            <button class="output-btn ${e.direction?"output-btn-secondary":"output-btn-primary"}" \n                                    onclick="setDCMotorDirection(${e.index}, false)">\n                                <svg viewBox="0 0 24 24" width="16" height="16" style="vertical-align: middle; margin-right: 4px;"><path fill="currentColor" d="M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z" /></svg>\n                                Reverse\n                            </button>\n                        </div>\n                    </div>\n                    \n                    \x3c!-- Start/Stop Buttons --\x3e\n                    <div class="control-group">\n                        <div class="button-group" id="motor-control-buttons-${e.index}">\n                            <button class="output-btn output-btn-success output-btn-wide" \n                                    onclick="startDCMotor(${e.index})" \n                                    ${e.running?"disabled":""}>\n                                <svg viewBox="0 0 24 24" width="16" height="16" style="vertical-align: middle; margin-right: 4px;"><path fill="currentColor" d="M8,5.14V19.14L19,12.14L8,5.14Z" /></svg>\n                                Start\n                            </button>\n                            <button class="output-btn output-btn-danger output-btn-wide" \n                                    onclick="stopDCMotor(${e.index})"\n                                    ${e.running?"":"disabled"}>\n                                <svg viewBox="0 0 24 24" width="16" height="16" style="vertical-align: middle; margin-right: 4px;"><path fill="currentColor" d="M18,18H6V6H18V18Z" /></svg>\n                                Stop\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `).join(""):e.forEach(e=>{const n=t.querySelector(`[data-motor-index="${e.index}"]`);if(!n)return;const o=document.getElementById(`motor-slider-${e.index}`);o&&!dcMotorSlidersFocused.get(e.index)&&(o.value=e.power||0);const a=document.getElementById(`motor-power-display-${e.index}`);a&&!dcMotorSlidersFocused.get(e.index)&&(a.textContent=`${e.power||0}%`);const s=document.getElementById(`motor-actual-power-${e.index}`);s&&(s.textContent=`${e.power||0}%`);const r=document.getElementById(`motor-current-${e.index}`);r&&(r.textContent=`${(e.current||0).toFixed(2)}A`);const i=n.querySelectorAll(".output-status-badge");i.length>=1&&(i[0].className="output-status-badge "+(e.running?"running":"stopped"),i[0].textContent=e.running?"RUNNING":"STOPPED"),i.length>=2&&(i[1].style.color="white",i[1].innerHTML=`<i class="mdi ${e.direction?"mdi-axis-z-rotate-counterclockwise":"mdi-axis-z-rotate-clockwise"}"></i> ${e.direction?"FORWARD":"REVERSE"}`);const l=n.querySelectorAll("#motor-direction-buttons-"+e.index+" button");l.length>=2&&(l[0].className="output-btn "+(e.direction?"output-btn-primary":"output-btn-secondary"),l[1].className="output-btn "+(e.direction?"output-btn-secondary":"output-btn-primary"));const d=n.querySelectorAll("#motor-control-buttons-"+e.index+" button");d.length>=2&&(d[0].disabled=e.running,d[1].disabled=!e.running);const c=n.querySelector(".output-name");c&&(c.textContent=e.name||"DC Motor "+(e.index-26));const u=n.querySelector(".dashboard-icon");u&&(u.className="dashboard-icon "+(e.d?"active":"inactive"))})}function updateSliderValue(e,t){const n=document.getElementById(t);n&&(n.textContent=e.value+"%")}function markControlActive(e){activeControls.add(e)}function markControlInactive(e){setTimeout(()=>{activeControls.delete(e)},100)}function updateOutputSliderDisplay(e,t){const n=document.getElementById(`slider-display-${e}`);n&&(n.textContent=t+"%")}function updateMotorPowerDisplay(e,t){const n=document.getElementById(`motor-power-display-${e}`);n&&(n.textContent=t+"%")}async function setOutputState(e,t){pendingCommands.set(e,t);try{if(!(await fetch(`/api/output/${e}/state`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({state:t})})).ok)throw new Error("Failed to set output state")}catch(t){console.error("Error setting output state:",t),showToast("error","Error","Failed to control output"),pendingCommands.delete(e)}}async function setOutputValue(e,t){const n=parseInt(t);pendingCommands.set(e,n);try{if(!(await fetch(`/api/output/${e}/value`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({value:n})})).ok)throw new Error("Failed to set output value")}catch(t){console.error("Error setting output value:",t),showToast("error","Error","Failed to control output"),pendingCommands.delete(e)}}let stepperDirection=!0;async function setStepperRPM(){const e=document.getElementById("stepperRPM").value;try{if(!(await fetch("/api/stepper/rpm",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({rpm:parseInt(e)})})).ok)throw new Error("Failed to set RPM")}catch(e){console.error("Error setting stepper RPM:",e),showToast("error","Error","Failed to set RPM")}}async function setStepperDirection(e){stepperDirection=e;try{if(!(await fetch("/api/stepper/direction",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({forward:e})})).ok)throw new Error("Failed to set direction")}catch(e){console.error("Error setting stepper direction:",e),showToast("error","Error","Failed to set direction")}}async function startStepper(){const e=document.getElementById("stepperRPM").value;console.log(`[STEPPER] Start/Update clicked: RPM=${e}, direction=${stepperDirection?"Forward":"Reverse"}`);try{if(!(await fetch("/api/stepper/start",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({rpm:parseInt(e),forward:stepperDirection})})).ok)throw new Error("Failed to start stepper");console.log("[STEPPER] Command sent successfully"),showToast("success","Success","Stepper command sent"),fetchAndRenderOutputs()}catch(e){console.error("[STEPPER] Error:",e),showToast("error","Error","Failed to send command")}}async function stopStepper(){try{if(!(await fetch("/api/stepper/stop",{method:"POST"})).ok)throw new Error("Failed to stop stepper");showToast("success","Success","Stepper motor stopped"),fetchAndRenderOutputs()}catch(e){console.error("Error stopping stepper:",e),showToast("error","Error","Failed to stop motor")}}async function setDCMotorPower(e,t){try{if(!(await fetch(`/api/dcmotor/${e}/power`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({power:parseInt(t)})})).ok)throw new Error("Failed to set power")}catch(e){console.error("Error setting DC motor power:",e),showToast("error","Error","Failed to set power")}}async function setDCMotorDirection(e,t){try{if(!(await fetch(`/api/dcmotor/${e}/direction`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({forward:t})})).ok)throw new Error("Failed to set direction")}catch(e){console.error("Error setting DC motor direction:",e),showToast("error","Error","Failed to set direction")}}async function startDCMotor(e){try{const t=document.getElementById(`motor-slider-${e}`),n=t?parseFloat(t.value):0,o=document.querySelectorAll(`#motor-direction-buttons-${e} button`),a=!(o.length>=2)||o[0].classList.contains("output-btn-primary");console.log(`[DC MOTOR] Start clicked: index=${e}, power=${n}%, direction=${a?"Forward":"Reverse"}`);if(!(await fetch(`/api/dcmotor/${e}/start`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({power:n,forward:a})})).ok)throw new Error("Failed to start motor");console.log("[DC MOTOR] Start command sent successfully"),showToast("success","Success","Motor started"),fetchAndRenderOutputs()}catch(e){console.error("[DC MOTOR] Start error:",e),showToast("error","Error","Failed to start motor")}}async function stopDCMotor(e){try{console.log(`[DC MOTOR] Stop clicked: index=${e}`);if(!(await fetch(`/api/dcmotor/${e}/stop`,{method:"POST"})).ok)throw new Error("Failed to stop motor");console.log("[DC MOTOR] Stop command sent successfully"),showToast("success","Success","Motor stopped"),fetchAndRenderOutputs()}catch(e){console.error("[DC MOTOR] Stop error:",e),showToast("error","Error","Failed to stop motor")}}let currentOutputIndex=null,outputConfigData=null;async function openDigitalOutputConfigModal(e){currentOutputIndex=e;try{const t=await fetch(`/api/config/output/${e}`);if(!t.ok)throw new Error("Failed to fetch config");outputConfigData=await t.json(),document.getElementById("outputConfigIndex").textContent=`[${e}]`,document.getElementById("outputConfigName").value=outputConfigData.name||"",document.getElementById("outputConfigMode").value=outputConfigData.mode||0,document.getElementById("outputShowOnDashboard").checked=outputConfigData.showOnDashboard||!1,document.getElementById("digitalOutputConfigModal").classList.add("active")}catch(e){console.error("Error fetching output config:",e),showToast("error","Error","Failed to load configuration")}}function closeDigitalOutputConfigModal(){document.getElementById("digitalOutputConfigModal").classList.remove("active"),currentOutputIndex=null,outputConfigData=null}async function saveDigitalOutputConfig(){if(null===currentOutputIndex)return;const e={index:currentOutputIndex,name:document.getElementById("outputConfigName").value,mode:parseInt(document.getElementById("outputConfigMode").value),showOnDashboard:document.getElementById("outputShowOnDashboard").checked};try{if(!(await fetch(`/api/config/output/${currentOutputIndex}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).ok)throw new Error("Failed to save config");showToast("success","Success","Configuration saved successfully"),closeDigitalOutputConfigModal(),fetchAndRenderOutputs()}catch(e){console.error("Error saving output config:",e),showToast("error","Error","Failed to save configuration")}}let stepperConfigData=null;async function openStepperConfigModal(){try{const e=await fetch("/api/config/stepper");if(!e.ok)throw new Error("Failed to fetch config");stepperConfigData=await e.json(),document.getElementById("stepperConfigName").value=stepperConfigData.name||"",document.getElementById("stepperStepsPerRev").value=stepperConfigData.stepsPerRev||200,document.getElementById("stepperMaxRPM").value=stepperConfigData.maxRPM||500,document.getElementById("stepperHoldCurrent").value=stepperConfigData.holdCurrent_mA||50,document.getElementById("stepperRunCurrent").value=stepperConfigData.runCurrent_mA||100,document.getElementById("stepperAcceleration").value=stepperConfigData.acceleration||100,document.getElementById("stepperInvertDirection").checked=stepperConfigData.invertDirection||!1,document.getElementById("stepperShowOnDashboard").checked=stepperConfigData.showOnDashboard||!1,document.getElementById("stepperConfigModal").classList.add("active")}catch(e){console.error("Error fetching stepper config:",e),showToast("error","Error","Failed to load configuration")}}function closeStepperConfigModal(){document.getElementById("stepperConfigModal").classList.remove("active"),stepperConfigData=null}async function saveStepperConfig(){const e={name:document.getElementById("stepperConfigName").value,stepsPerRev:parseInt(document.getElementById("stepperStepsPerRev").value),maxRPM:parseInt(document.getElementById("stepperMaxRPM").value),holdCurrent_mA:parseInt(document.getElementById("stepperHoldCurrent").value),runCurrent_mA:parseInt(document.getElementById("stepperRunCurrent").value),acceleration:parseInt(document.getElementById("stepperAcceleration").value),invertDirection:document.getElementById("stepperInvertDirection").checked,showOnDashboard:document.getElementById("stepperShowOnDashboard").checked};if(e.holdCurrent_mA<1||e.holdCurrent_mA>1e3)showToast("error","Validation Error","Hold current must be 1-1000 mA");else if(e.runCurrent_mA<1||e.runCurrent_mA>1800)showToast("error","Validation Error","Run current must be 1-1800 mA");else if(e.maxRPM<1||e.maxRPM>900)showToast("error","Validation Error","Max RPM must be 1-900");else if(e.acceleration<1||e.acceleration>e.maxRPM)showToast("error","Validation Error",`Acceleration must be 1-${e.maxRPM} RPM/s`);else if(e.stepsPerRev<1||e.stepsPerRev>1e4)showToast("error","Validation Error","Steps per revolution must be 1-10000");else try{const t=await fetch("/api/config/stepper",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok){const e=await t.json().catch(()=>({}));throw new Error(e.error||"Failed to save config")}showToast("success","Success","Configuration saved successfully"),closeStepperConfigModal(),fetchAndRenderOutputs()}catch(e){console.error("Error saving stepper config:",e),showToast("error","Error",e.message||"Failed to save configuration")}}let currentDCMotorIndex=null,dcMotorConfigData=null;async function openDCMotorConfigModal(e){currentDCMotorIndex=e;try{const t=await fetch(`/api/config/dcmotor/${e}`);if(!t.ok)throw new Error("Failed to fetch config");dcMotorConfigData=await t.json(),document.getElementById("dcMotorConfigIndex").textContent=""+(e-26),document.getElementById("dcMotorConfigName").value=dcMotorConfigData.name||"",document.getElementById("dcMotorInvertDirection").checked=dcMotorConfigData.invertDirection||!1,document.getElementById("dcMotorShowOnDashboard").checked=dcMotorConfigData.showOnDashboard||!1,document.getElementById("dcMotorConfigModal").classList.add("active")}catch(e){console.error("Error fetching DC motor config:",e),showToast("error","Error","Failed to load configuration")}}function closeDCMotorConfigModal(){document.getElementById("dcMotorConfigModal").classList.remove("active"),currentDCMotorIndex=null,dcMotorConfigData=null}async function saveDCMotorConfig(){if(null===currentDCMotorIndex)return;const e={index:currentDCMotorIndex,name:document.getElementById("dcMotorConfigName").value,invertDirection:document.getElementById("dcMotorInvertDirection").checked,showOnDashboard:document.getElementById("dcMotorShowOnDashboard").checked};try{if(!(await fetch(`/api/config/dcmotor/${currentDCMotorIndex}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})).ok)throw new Error("Failed to save config");showToast("success","Success","Configuration saved successfully"),closeDCMotorConfigModal(),fetchAndRenderOutputs()}catch(e){console.error("Error saving DC motor config:",e),showToast("error","Error","Failed to save configuration")}}let comportsRefreshInterval=null;function initComPortsTab(){comportsRefreshInterval&&clearInterval(comportsRefreshInterval),fetchAndRenderComPorts(),comportsRefreshInterval=setInterval(()=>{document.getElementById("comports").classList.contains("active")?fetchAndRenderComPorts():(clearInterval(comportsRefreshInterval),comportsRefreshInterval=null)},2e3)}async function fetchAndRenderComPorts(){try{const e=await fetch("/api/comports");if(!e.ok)throw new Error("Failed to fetch COM ports");const t=await e.json();console.log("COM ports data received:",t),renderComPorts(t.ports||[])}catch(e){console.error("Error fetching COM ports:",e),showComPortError()}}function renderComPorts(e){const t=document.getElementById("comports-list");if(!t)return;if(0===e.length)return void(t.innerHTML='<div class="empty-message">No COM ports configured</div>');const n={0:"RS-232 Port 1",1:"RS-232 Port 2",2:"RS-485 Port 1",3:"RS-485 Port 2"};t.innerHTML=e.map(e=>{return`\n        <div class="comport-item">\n            <div class="comport-header">\n                <div class="comport-header-left">\n                    <span class="comport-type">${n[e.index]||`Port ${e.index+1}`}</span>\n                    <span class="comport-name">${e.name||"Unnamed"}</span>\n                </div>\n                <div class="comport-header-right">\n                    ${t=e.error,t?'<span class="status-badge status-error">Comms Error</span>':'<span class="status-badge status-ok">OK</span>'}\n                    <span class="dashboard-icon ${e.d?"active":"inactive"}" title="${e.d?"Shown on Dashboard":"Hidden from Dashboard"}">\n                        ${getDashboardIconSVG()}\n                    </span>\n                    <button class="icon-btn" onclick="openComPortConfigModal(${e.index})" title="Configure">\n                        ${getConfigIconSVG()}\n                    </button>\n                </div>\n            </div>\n            <div class="comport-details">\n                <div class="comport-config-item">\n                    <span class="config-label">Baud Rate:</span>\n                    <span class="config-value">${e.baud}</span>\n                </div>\n                <div class="comport-config-item">\n                    <span class="config-label">Data Bits:</span>\n                    <span class="config-value">${e.dataBits||8}</span>\n                </div>\n                <div class="comport-config-item">\n                    <span class="config-label">Parity:</span>\n                    <span class="config-value">${getParityName(e.parity)}</span>\n                </div>\n                <div class="comport-config-item">\n                    <span class="config-label">Stop Bits:</span>\n                    <span class="config-value">${e.stopBits||1}</span>\n                </div>\n            </div>\n        </div>\n    `;var t}).join("")}function getParityName(e){return{0:"None",1:"Odd",2:"Even"}[e]||"Unknown"}function showComPortError(){const e=document.getElementById("comports-list");e&&(e.innerHTML='<div class="error-message">Failed to load COM ports</div>')}let currentComPortIndex=null,comPortConfigData=null;async function openComPortConfigModal(e){currentComPortIndex=e;try{const t=await fetch(`/api/config/comport/${e}`);if(!t.ok)throw new Error("Failed to fetch config");comPortConfigData=await t.json();const n={0:"RS-232 Port 1",1:"RS-232 Port 2",2:"RS-485 Port 1",3:"RS-485 Port 2"};document.getElementById("comportConfigTitle").textContent=n[e]||`Port ${e+1}`,document.getElementById("comportConfigName").value=comPortConfigData.name||"",document.getElementById("comportConfigBaud").value=comPortConfigData.baudRate||9600,document.getElementById("comportConfigParity").value=comPortConfigData.parity||0,document.getElementById("comportConfigStopBits").value=comPortConfigData.stopBits||1,document.getElementById("comportShowOnDashboard").checked=comPortConfigData.showOnDashboard||!1,document.getElementById("comportConfigModal").classList.add("active")}catch(e){console.error("Error fetching COM port config:",e),showToast("error","Error","Failed to load configuration")}}function closeComPortConfigModal(){document.getElementById("comportConfigModal").classList.remove("active"),currentComPortIndex=null,comPortConfigData=null,document.getElementById("comportConfigName").value="",document.getElementById("comportConfigBaud").value="9600",document.getElementById("comportConfigParity").value="0",document.getElementById("comportConfigStopBits").value="1",document.getElementById("comportShowOnDashboard").checked=!1}async function saveComPortConfig(){if(null===currentComPortIndex)return;const e=document.getElementById("comportConfigName").value,t=parseInt(document.getElementById("comportConfigBaud").value),n=parseInt(document.getElementById("comportConfigParity").value),o=parseFloat(document.getElementById("comportConfigStopBits").value),a={index:currentComPortIndex,name:e,baudRate:t,dataBits:8,parity:n,stopBits:o,showOnDashboard:document.getElementById("comportShowOnDashboard").checked,enabled:!0};try{const e=await fetch(`/api/config/comport/${currentComPortIndex}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)});if(!e.ok)throw new Error("Failed to save config");await e.json();showToast("success","Success",`Configuration saved for ${["RS-232 Port 1","RS-232 Port 2","RS-485 Port 1","RS-485 Port 2"][currentComPortIndex]||`Port ${currentComPortIndex+1}`}`),closeComPortConfigModal(),fetchAndRenderComPorts()}catch(e){console.error("Error saving COM port config:",e),showToast("error","Error","Failed to save configuration")}}const DRIVER_DEFINITIONS={0:{name:"Hamilton pH Probe",interface:0,description:"Hamilton Modbus pH/Temperature probe",hasSetpoint:!1},1:{name:"Hamilton DO Probe",interface:0,description:"Hamilton Modbus Dissolved Oxygen probe",hasSetpoint:!1},2:{name:"Hamilton OD Probe",interface:0,description:"Hamilton Modbus Optical Density probe",hasSetpoint:!1},3:{name:"Alicat Mass Flow Controller",interface:0,description:"Alicat Modbus MFC",hasSetpoint:!0},10:{name:"Pressure Controller",interface:1,description:"0-10V analogue pressure controller",hasSetpoint:!0}},INTERFACE_NAMES={0:"Modbus RTU",1:"Analogue I/O"};let currentDeviceIndex=-1,deviceControlData={},devicesPollingInterval=null;async function fetchDeviceControlData(){try{const e=await fetch("/api/inputs");if(!e.ok)return;await e.json();const t=await fetch("/api/devices");if(t.ok){const e=await t.json();e.devices&&e.devices.length>0&&updateDeviceControlStatus(e.devices)}}catch(e){console.error("Error fetching device control data:",e)}}function getDeviceControlIndex(e){return e-20}function updateDeviceControlStatus(e){e.forEach(e=>{const t=getDeviceControlIndex(e.dynamicIndex),n=document.querySelector(`.device-card[data-control-index="${t}"]`);if(!n)return;const o=n.querySelector(".device-status");if(o&&1!==e.interfaceType){const t=!1!==e.connected;o.className="device-status "+(t?"status-online":"status-offline"),o.textContent=t?"Connected":"Disconnected",e.fault&&(o.className="device-status status-fault",o.textContent="FAULT")}else o&&1===e.interfaceType&&(e.fault?(o.className="device-status status-fault",o.textContent="FAULT"):o.style.display="none");const a=n.querySelector(".setpoint-value"),s=n.querySelector(".actual-value"),r=n.querySelector(".device-message");console.log(`[DEVICES] Device ${t}: setpoint=${e.setpoint}, actualValue=${e.actualValue}, unit=${e.unit}`),a&&void 0!==e.setpoint&&null!==e.setpoint&&(a.textContent=`${e.setpoint.toFixed(2)} ${e.unit||""}`),s&&void 0!==e.actualValue&&null!==e.actualValue&&(s.textContent=`${e.actualValue.toFixed(2)} ${e.unit||""}`),r&&e.message&&(r.textContent=e.message,r.style.display=e.message?"block":"none")})}function startDevicesPolling(){devicesPollingInterval&&clearInterval(devicesPollingInterval),fetchDeviceControlData(),devicesPollingInterval=setInterval(fetchDeviceControlData,2e3)}function stopDevicesPolling(){devicesPollingInterval&&(clearInterval(devicesPollingInterval),devicesPollingInterval=null)}function openAddDeviceModal(){document.getElementById("deviceInterfaceType").value="",document.getElementById("deviceDriverType").value="",document.getElementById("deviceName").value="",document.getElementById("driverTypeGroup").style.display="none",document.getElementById("deviceCommonFields").style.display="none",document.getElementById("modbusFields").style.display="none",document.getElementById("analogueIOFields").style.display="none";const e=document.getElementById("addDeviceModal");e.style.display="flex",e.classList.add("active")}function closeAddDeviceModal(){const e=document.getElementById("addDeviceModal");e.style.display="none",e.classList.remove("active")}function closeDeviceConfigModal(){const e=document.getElementById("deviceConfigModal");e.style.display="none",e.classList.remove("active")}function updateDriverOptions(){const e=parseInt(document.getElementById("deviceInterfaceType").value),t=document.getElementById("deviceDriverType"),n=document.getElementById("driverTypeGroup");if(t.innerHTML='<option value="">-- Select Driver --</option>',isNaN(e))n.style.display="none";else{for(const[n,o]of Object.entries(DRIVER_DEFINITIONS))if(o.interface===e){const e=document.createElement("option");e.value=n,e.textContent=o.name,t.appendChild(e)}n.style.display="block",document.getElementById("deviceCommonFields").style.display="none",document.getElementById("modbusFields").style.display="none",document.getElementById("analogueIOFields").style.display="none"}}function updateDeviceFields(){const e=parseInt(document.getElementById("deviceDriverType").value),t=parseInt(document.getElementById("deviceInterfaceType").value);if(isNaN(e))return document.getElementById("deviceCommonFields").style.display="none",document.getElementById("modbusFields").style.display="none",void(document.getElementById("analogueIOFields").style.display="none");document.getElementById("deviceCommonFields").style.display="block",document.getElementById("modbusFields").style.display=0===t?"block":"none",document.getElementById("analogueIOFields").style.display=1===t?"block":"none";const n=DRIVER_DEFINITIONS[e];n&&(document.getElementById("deviceName").value=n.name)}async function loadDevices(){try{const e=await fetch("/api/devices");if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);displayDevices((await e.json()).devices||[])}catch(e){console.error("Error loading devices:",e),document.getElementById("devices-list").innerHTML='<div class="error-message">Failed to load devices</div>'}}function displayDevices(e){const t=document.getElementById("devices-list");e&&0!==e.length?(t.innerHTML="",e.forEach(e=>{const n=createDeviceCard(e);t.appendChild(n)})):t.innerHTML='<div class="empty-message">No devices configured. Click "Add New Device" to get started.</div>'}function createDeviceCard(e){const t=document.createElement("div");t.className="device-card";const n=getDeviceControlIndex(e.dynamicIndex);t.setAttribute("data-control-index",n);const o=DRIVER_DEFINITIONS[e.driverType],a=INTERFACE_NAMES[e.interfaceType],s=1!==e.interfaceType,r=e.fault?"status-fault":"status-online",i=e.fault?"FAULT":"Connected";return t.innerHTML=`\n        <div class="output-header">\n            <div class="output-header-left">\n                <span class="output-name">${e.name}</span>\n                <span class="output-mode-badge">${o?o.name:"Unknown"}</span>\n            </div>\n            <div class="output-header-right">\n                ${s?`<div class="device-status ${r}">${i}</div>`:""}\n                <button class="icon-btn" onclick="openDeviceConfig(${e.dynamicIndex})" title="Configure">\n                    ${getConfigIconSVG()}\n                </button>\n            </div>\n        </div>\n        \n        \x3c!-- Device Configuration Info --\x3e\n        <div class="device-info">\n            <div class="device-detail">\n                <strong>Interface:</strong> ${a}\n            </div>\n            <div class="device-detail">\n                <strong>Sensor Index:</strong> ${e.dynamicIndex}\n            </div>\n            <div class="device-detail">\n                <strong>Control Index:</strong> ${n}\n            </div>\n            ${getDeviceDetailsHTML(e)}\n        </div>\n        \n        \x3c!-- Device Control Section --\x3e\n        <div class="device-control-section">\n            <div class="device-control-row">\n                ${o&&o.hasSetpoint?'\n                    <div class="control-item">\n                        <span class="control-label">Setpoint:</span>\n                        <span class="setpoint-value">-- --</span>\n                    </div>\n                ':""}\n                <div class="control-item">\n                    <span class="control-label">${o&&o.hasSetpoint?"Actual:":"Value:"}</span>\n                    <span class="actual-value">-- --</span>\n                </div>\n            </div>\n            \n            ${o&&o.hasSetpoint?`\n                <div class="device-control-input">\n                    <input type="number" \n                           id="setpoint-input-${n}" \n                           class="setpoint-input" \n                           step="0.1" \n                           placeholder="Enter setpoint">\n                    <button class="output-btn output-btn-primary" \n                            onclick="sendSetpoint(${n})">\n                        Set\n                    </button>\n                    <button class="output-btn output-btn-secondary" \n                            onclick="resetFault(${n})" \n                            title="Reset Fault">\n                        Reset Fault\n                    </button>\n                </div>\n            `:""}\n            \n            <div class="device-message" style="display: none;"></div>\n        </div>\n    `,t}function getDeviceDetailsHTML(e){let t="";if(0===e.interfaceType){t+=`\n            <div class="device-detail">\n                <strong>Port:</strong> ${["RS-232 Port 1","RS-232 Port 2","RS-485 Port 1","RS-485 Port 2"][e.portIndex]||"Unknown"}\n            </div>\n            <div class="device-detail">\n                <strong>Slave ID:</strong> ${e.slaveID}\n            </div>\n        `}else 1===e.interfaceType&&(t+=`\n            <div class="device-detail">\n                <strong>DAC Output:</strong> ${e.dacOutputIndex+1}\n            </div>\n            <div class="device-detail">\n                <strong>Calibration:</strong> scale=${e.scale?e.scale.toFixed(2):"N/A"} Pa/mV\n            </div>\n            <div class="device-detail">\n                <strong>Unit:</strong> ${e.unit}\n            </div>\n        `);return t}async function createDevice(){const e=parseInt(document.getElementById("deviceInterfaceType").value),t=parseInt(document.getElementById("deviceDriverType").value),n=document.getElementById("deviceName").value.trim();if(isNaN(e)||isNaN(t))return void showToast("error","Validation Error","Please select interface and driver type");if(!n)return void showToast("error","Validation Error","Please enter a device name");const o={interfaceType:e,driverType:t,name:n};if(0===e){if(o.portIndex=parseInt(document.getElementById("deviceModbusPort").value),o.slaveID=parseInt(document.getElementById("deviceModbusSlaveID").value),isNaN(o.slaveID)||o.slaveID<1||o.slaveID>247)return void showToast("error","Validation Error","Slave ID must be between 1 and 247")}else if(1===e){o.dacOutputIndex=parseInt(document.getElementById("deviceDacOutput").value),o.unit=document.getElementById("devicePressureUnit").value;const e=parseFloat(document.getElementById("deviceCalScale").value),t=parseFloat(document.getElementById("deviceCalOffset").value);if(isNaN(e)||isNaN(t))return void showToast("error","Validation Error","Invalid scale or offset values");o.scale=e,o.offset=t,console.log(`[PRESSURE] Calibration: scale=${e.toFixed(2)}, offset=${t.toFixed(2)}, unit=${o.unit}`)}try{const e=await fetch("/api/devices",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!e.ok){const t=await e.json();throw new Error(t.message||"Failed to create device")}showToast("success","Device Created",`Device "${n}" created successfully (Index ${(await e.json()).dynamicIndex})`),closeAddDeviceModal(),loadDevices()}catch(e){console.error("Error creating device:",e),showToast("error","Error",e.message)}}async function openDeviceConfig(e){currentDeviceIndex=e;try{const t=await fetch(`/api/devices/${e}`);if(!t.ok)throw new Error("Failed to load device configuration");displayDeviceConfig(await t.json());const n=document.getElementById("deviceConfigModal");n.style.display="flex",n.classList.add("active")}catch(e){console.error("Error loading device config:",e),showToast("error","Error","Failed to load device configuration")}}function displayDeviceConfig(e){const t=document.getElementById("deviceConfigContent"),n=DRIVER_DEFINITIONS[e.driverType];let o=`\n        <div class="config-info">\n            <p><strong>Driver:</strong> ${n?n.name:"Unknown"}</p>\n            <p><strong>Interface:</strong> ${INTERFACE_NAMES[e.interfaceType]}</p>\n            <p><strong>Dynamic Index:</strong> ${e.dynamicIndex}</p>\n        </div>\n        \n        \x3c!-- Device Name (always editable) --\x3e\n        <div class="form-group">\n            <label for="configDeviceName">Device Name:</label>\n            <input type="text" id="configDeviceName" value="${e.name}" maxlength="39" required>\n        </div>\n    `;0===e.interfaceType?o+=`\n            <div class="form-group">\n                <label for="configModbusPort">COM Port:</label>\n                <select id="configModbusPort">\n                    <option value="0" ${0===e.portIndex?"selected":""}>RS-232 Port 1</option>\n                    <option value="1" ${1===e.portIndex?"selected":""}>RS-232 Port 2</option>\n                    <option value="2" ${2===e.portIndex?"selected":""}>RS-485 Port 1</option>\n                    <option value="3" ${3===e.portIndex?"selected":""}>RS-485 Port 2</option>\n                </select>\n            </div>\n            <div class="form-group">\n                <label for="configModbusSlaveID">Slave ID (1-247):</label>\n                <input type="number" id="configModbusSlaveID" value="${e.slaveID}" min="1" max="247" required>\n            </div>\n        `:1===e.interfaceType&&(o+=`\n            <div class="form-group">\n                <label for="configDacOutput">DAC Output:</label>\n                <select id="configDacOutput">\n                    <option value="0" ${0===e.dacOutputIndex?"selected":""}>Analog Output 1</option>\n                    <option value="1" ${1===e.dacOutputIndex?"selected":""}>Analog Output 2</option>\n                </select>\n            </div>\n            <div class="form-group">\n                <label for="configPressureUnit">Unit:</label>\n                <select id="configPressureUnit" onchange="updatePressureCalibrationUnits()">\n                    <option value="Pa" ${"Pa"===e.unit?"selected":""}>Pa (Pascal)</option>\n                    <option value="kPa" ${"kPa"===e.unit?"selected":""}>kPa (Kilopascal)</option>\n                    <option value="bar" ${"bar"===e.unit?"selected":""}>bar</option>\n                    <option value="PSI" ${"PSI"===e.unit?"selected":""}>PSI (Pounds/sq.in)</option>\n                    <option value="atm" ${"atm"===e.unit?"selected":""}>atm (Atmosphere)</option>\n                    <option value="mbar" ${"mbar"===e.unit?"selected":""}>mbar (Millibar)</option>\n                </select>\n            </div>\n            \n            <h4 style="margin-top: 20px;">Calibration</h4>\n            \n            <div style="background: #f5f5f5; padding: 15px; border-radius: 4px; margin: 10px 0;">\n                <strong>Point 1 (Low)</strong>\n                <div class="form-row" style="margin-top: 10px;">\n                    <div class="form-group">\n                        <label for="configCalVoltage1">Voltage (mV):</label>\n                        <input type="number" id="configCalVoltage1" placeholder="e.g., 0" step="0.1">\n                    </div>\n                    <div class="form-group">\n                        <label for="configCalPressure1"><span id="configPressureLabel1">Pressure (${e.unit}):</span></label>\n                        <input type="number" id="configCalPressure1" placeholder="e.g., 0" step="0.001">\n                    </div>\n                </div>\n            </div>\n            \n            <div style="background: #f5f5f5; padding: 15px; border-radius: 4px; margin: 10px 0;">\n                <strong>Point 2 (High)</strong>\n                <div class="form-row" style="margin-top: 10px;">\n                    <div class="form-group">\n                        <label for="configCalVoltage2">Voltage (mV):</label>\n                        <input type="number" id="configCalVoltage2" placeholder="e.g., 10000" step="0.1">\n                    </div>\n                    <div class="form-group">\n                        <label for="configCalPressure2"><span id="configPressureLabel2">Pressure (${e.unit}):</span></label>\n                        <input type="number" id="configCalPressure2" placeholder="e.g., 10" step="0.001">\n                    </div>\n                </div>\n            </div>\n            \n            <button type="button" onclick="calculatePressureCalibration()" \n                    style="width: 100%; padding: 10px; margin: 15px 0 10px 0; background: #ddd; border: none; border-radius: 4px; cursor: pointer;">\n                Calculate\n            </button>\n            \n            <div style="background: #f5f5f5; padding: 15px; border-radius: 4px; margin: 10px 0;">\n                <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">\n                    <span>Calculated Scale:</span>\n                    <span id="configCalScaleResult" style="color: #27ae60; font-weight: bold;">${e.scale?e.scale.toFixed(4):"100.0000"}</span>\n                </div>\n                <div style="display: flex; justify-content: space-between;">\n                    <span>Calculated Offset:</span>\n                    <span id="configCalOffsetResult" style="color: #27ae60; font-weight: bold;">${e.offset?e.offset.toFixed(2):"0.00"}</span>\n                </div>\n                \n                <input type="hidden" id="configCalScale" value="${e.scale||100}">\n                <input type="hidden" id="configCalOffset" value="${e.offset||0}">\n                \n                <button type="button" onclick="resetPressureCalibration()" \n                        style="width: 100%; padding: 8px; margin-top: 15px; background: #ddd; border: none; border-radius: 4px; cursor: pointer;">\n                    Reset to Default (100.0, 0.0)\n                </button>\n            </div>\n        `),t.innerHTML=o}async function saveDeviceConfig(){if(!(currentDeviceIndex<0))try{const e=await fetch(`/api/devices/${currentDeviceIndex}`);if(!e.ok)throw new Error("Failed to load device");const t=await e.json(),n={name:document.getElementById("configDeviceName").value.trim()};if(!n.name)return void showToast("error","Validation Error","Please enter a device name");if(0===t.interfaceType){if(n.portIndex=parseInt(document.getElementById("configModbusPort").value),n.slaveID=parseInt(document.getElementById("configModbusSlaveID").value),isNaN(n.slaveID)||n.slaveID<1||n.slaveID>247)return void showToast("error","Validation Error","Slave ID must be between 1 and 247")}else if(1===t.interfaceType){n.dacOutputIndex=parseInt(document.getElementById("configDacOutput").value),n.unit=document.getElementById("configPressureUnit").value;const e=parseFloat(document.getElementById("configCalScale").value),t=parseFloat(document.getElementById("configCalOffset").value);if(isNaN(e)||isNaN(t))return void showToast("error","Validation Error","Invalid scale or offset values");n.scale=e,n.offset=t,console.log(`[PRESSURE] Calibration: scale=${e.toFixed(2)}, offset=${t.toFixed(2)}, unit=${n.unit}`)}const o=await fetch(`/api/devices/${currentDeviceIndex}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)});if(!o.ok){const e=await o.json();throw new Error(e.error||"Failed to update device")}showToast("success","Device Updated","Device configuration updated successfully"),closeDeviceConfigModal(),loadDevices()}catch(e){console.error("Error updating device:",e),showToast("error","Error",e.message)}}async function deleteDevice(){if(!(currentDeviceIndex<0)&&confirm("Are you sure you want to delete this device? Any associated sensors will also be removed."))try{const e=await fetch(`/api/devices/${currentDeviceIndex}`,{method:"DELETE"});if(!e.ok){const t=await e.json();throw new Error(t.message||"Failed to delete device")}showToast("success","Device Deleted","Device deleted successfully"),closeDeviceConfigModal(),loadDevices()}catch(e){console.error("Error deleting device:",e),showToast("error","Error",e.message)}}async function sendSetpoint(e){const t=document.getElementById(`setpoint-input-${e}`);if(!t)return void showToast("error","Error","Setpoint input not found");const n=parseFloat(t.value);if(isNaN(n))showToast("error","Validation Error","Please enter a valid setpoint value");else{console.log(`[DEVICE] Sending setpoint to control index ${e}: ${n}`);try{const o=await fetch(`/api/device/${e}/setpoint`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({setpoint:n})});if(!o.ok){const e=await o.json();throw new Error(e.error||"Failed to set setpoint")}await o.json();showToast("success","Setpoint Set",`Setpoint ${n} sent to device`),console.log("[DEVICE] Setpoint command sent successfully"),t.value="",fetchDeviceControlData()}catch(e){console.error("Error setting setpoint:",e),showToast("error","Error",e.message)}}}async function resetFault(e){console.log(`[DEVICE] Resetting fault for control index ${e}`);try{const t=await fetch(`/api/device/${e}/fault/reset`,{method:"POST"});if(!t.ok){const e=await t.json();throw new Error(e.error||"Failed to reset fault")}await t.json();showToast("success","Fault Reset","Device fault reset command sent"),console.log("[DEVICE] Fault reset command sent successfully"),fetchDeviceControlData()}catch(e){console.error("Error resetting fault:",e),showToast("error","Error",e.message)}}function calculatePressureCalibration(){const e=parseFloat(document.getElementById("configCalVoltage1").value),t=parseFloat(document.getElementById("configCalPressure1").value),n=parseFloat(document.getElementById("configCalVoltage2").value),o=parseFloat(document.getElementById("configCalPressure2").value),a=document.getElementById("configPressureUnit").value;if(isNaN(e)||isNaN(t)||isNaN(n)||isNaN(o))return void showToast("error","Error","Please fill in all calibration points");if(Math.abs(n-e)<.1)return void showToast("error","Error","Voltage points must be different");const s={Pa:1,kPa:1e3,bar:1e5,PSI:6894.757,atm:101325,mbar:100}[a]||1e5,r=t*s,i=(o*s-r)/(n-e),l=r-i*e;document.getElementById("configCalScale").value=i,document.getElementById("configCalOffset").value=l,document.getElementById("configCalScaleResult").textContent=i.toFixed(4),document.getElementById("configCalOffsetResult").textContent=l.toFixed(2),showToast("success","Success","Calibration calculated successfully"),console.log(`[PRESSURE CAL] Unit=${a}, P1=${t} ${a} @ ${e}mV, P2=${o} ${a} @ ${n}mV`),console.log(`[PRESSURE CAL] Result: scale=${i.toFixed(4)} Pa/mV, offset=${l.toFixed(2)} Pa`)}function resetPressureCalibration(){document.getElementById("configCalScale").value=100,document.getElementById("configCalOffset").value=0,document.getElementById("configCalScaleResult").textContent="100.0000",document.getElementById("configCalOffsetResult").textContent="0.00",document.getElementById("configCalVoltage1").value="",document.getElementById("configCalPressure1").value="",document.getElementById("configCalVoltage2").value="",document.getElementById("configCalPressure2").value="",showToast("info","Reset","Calibration reset to default values")}function updatePressureCalibrationUnits(){const e=document.getElementById("configPressureUnit").value,t=document.getElementById("configPressureLabel1"),n=document.getElementById("configPressureLabel2");t&&(t.textContent=`Pressure (${e}):`),n&&(n.textContent=`Pressure (${e}):`)}function calculateAddDevicePressureCalibration(){const e=parseFloat(document.getElementById("deviceCalVoltage1").value),t=parseFloat(document.getElementById("deviceCalPressure1").value),n=parseFloat(document.getElementById("deviceCalVoltage2").value),o=parseFloat(document.getElementById("deviceCalPressure2").value),a=document.getElementById("devicePressureUnit").value;if(isNaN(e)||isNaN(t)||isNaN(n)||isNaN(o))return void showToast("error","Error","Please fill in all calibration points");if(Math.abs(n-e)<.1)return void showToast("error","Error","Voltage points must be different");const s={Pa:1,kPa:1e3,bar:1e5,PSI:6894.757,atm:101325,mbar:100}[a]||1e5,r=t*s,i=(o*s-r)/(n-e),l=r-i*e;document.getElementById("deviceCalScale").value=i,document.getElementById("deviceCalOffset").value=l,document.getElementById("deviceCalScaleResult").textContent=i.toFixed(4),document.getElementById("deviceCalOffsetResult").textContent=l.toFixed(2),showToast("success","Success","Calibration calculated successfully"),console.log(`[ADD DEVICE] Unit=${a}, P1=${t} ${a} @ ${e}mV, P2=${o} ${a} @ ${n}mV`),console.log(`[ADD DEVICE] Result: scale=${i.toFixed(4)} Pa/mV, offset=${l.toFixed(2)} Pa`)}function resetAddDevicePressureCalibration(){document.getElementById("deviceCalScale").value=100,document.getElementById("deviceCalOffset").value=0,document.getElementById("deviceCalScaleResult").textContent="100.0000",document.getElementById("deviceCalOffsetResult").textContent="0.00",document.getElementById("deviceCalVoltage1").value="",document.getElementById("deviceCalPressure1").value="",document.getElementById("deviceCalVoltage2").value="",document.getElementById("deviceCalPressure2").value="",showToast("info","Reset","Calibration reset to default values")}function updateAddDevicePressureUnits(){const e=document.getElementById("devicePressureUnit").value,t=document.getElementById("devicePressureLabel1"),n=document.getElementById("devicePressureLabel2");t&&(t.textContent=`Pressure (${e}):`),n&&(n.textContent=`Pressure (${e}):`)}function initDevicesTab(){startDevicesPolling(),console.log("[DEVICES] Polling started")}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",()=>{loadDevices(),startDevicesPolling()}):(loadDevices(),startDevicesPolling()),window.initDevicesTab=initDevicesTab,window.initControllersTab=initControllersTab;const CONTROLLER_TYPES={TEMPERATURE:{value:0,name:"Temperature Controller",indices:[40,41,42]},PH:{value:1,name:"pH Controller",indices:[43]},DO:{value:2,name:"Dissolved Oxygen Controller",indices:[44]}};let controllersData=[],controllersPolling=null,currentConfigIndex=null,selectedControllerType=null,focusedControllerSetpoints=new Set,lastTuningState=new Map,autotuneJustCompleted=new Map;async function initControllersTab(){console.log("[CONTROLLERS] Initializing Controllers tab"),await loadControllers(),controllersPolling||(controllersPolling=setInterval(loadControllers,2e3))}async function loadControllers(){try{const e=await fetch("/api/controllers");if(console.log("[CONTROLLERS] Fetch response:",e.status,e.ok),!e.ok)throw new Error("Failed to load controllers");const t=await e.json();console.log("[CONTROLLERS] Received data:",t),controllersData=t.controllers||[],console.log("[CONTROLLERS] Controllers array:",controllersData.length,"items"),controllersData.forEach(e=>{const t=lastTuningState.get(e.index),n=e.tuning;t&&!n&&(autotuneJustCompleted.set(e.index,!0),console.log(`[CONTROLLERS] Autotune completed for controller ${e.index}`)),lastTuningState.set(e.index,n)}),renderControllers()}catch(e){console.error("[CONTROLLERS] Error loading:",e)}}function renderControllers(){const e=document.getElementById("controllers-list");if(console.log("[CONTROLLERS] Rendering, container found:",!!e,"data length:",controllersData.length),!e)return;if(0===controllersData.length)return void(e.innerHTML='<div class="empty-message">No controllers configured. Click "Add Controller" above to create a new control loop.</div>');const t=0===e.children.length||null!==e.querySelector(".empty-message")||null!==e.querySelector(".loading")||e.children.length!==controllersData.length;console.log("[CONTROLLERS] needsFullRender:",t,"children:",e.children.length,"data length:",controllersData.length,"has loading:",!!e.querySelector(".loading")),t?(e.innerHTML="",controllersData.forEach(t=>{console.log("[CONTROLLERS] Creating card for controller",t.index);const n=createControllerCard(t);e.appendChild(n)}),console.log("[CONTROLLERS] Full render complete, container children:",e.children.length)):controllersData.forEach(e=>{updateControllerCard(e)})}function updateControllerCard(e){const t=document.querySelector(`.controller-card[data-index="${e.index}"]`);if(!t)return;const n=t.querySelector(".device-status");if(n){const t=e.fault?"status-fault":e.enabled?"status-online":"status-offline",o=e.fault?"FAULT":e.enabled?"ENABLED":"DISABLED";n.className=`device-status ${t}`,n.textContent=o}const o=t.querySelector(".dashboard-icon");o&&(o.className="dashboard-icon "+(e.showOnDashboard?"active":"inactive"),o.title=e.showOnDashboard?"Shown on Dashboard":"Hidden from Dashboard");const a=t.querySelectorAll(".controller-value-display");if(a[0]&&(a[0].textContent=null!==e.processValue?e.processValue.toFixed(1)+e.unit:"--"+e.unit),a[1]&&(a[1].textContent=e.setpoint.toFixed(1)+e.unit),a[2]){const t=null!==e.output?0===e.controlMethod?e.output>0?"ON":"OFF":e.output.toFixed(0)+"%":"--";a[2].textContent=t}if(!focusedControllerSetpoints.has(e.index)){const n=t.querySelector(`#ctrl-setpoint-${e.index}`);n&&(n.value=e.setpoint)}if(t.querySelectorAll(".output-btn").forEach(t=>{const n=t.getAttribute("onclick");n&&n.includes("updateControllerSetpoint")||(n&&(n.includes("enableController")||n.includes("disableController"))?(t.className="output-btn "+(e.enabled?"output-btn-secondary":"output-btn-success"),t.textContent=e.enabled?"Disable":"Enable",t.setAttribute("onclick",`${e.enabled?"disableController":"enableController"}(${e.index})`)):n&&n.includes("startAutotune")?(t.disabled=e.tuning,t.textContent=e.tuning?"Tuning...":"Autotune"):n&&n.includes("savePIDValues")&&(t.disabled=!autotuneJustCompleted.get(e.index)))}),1===e.controlMethod){const n=t.querySelector(`#ctrl-gains-${e.index}`);n&&(n.innerHTML=`<strong>Gains:</strong> P=${e.kP.toFixed(2)}, I=${e.kI.toFixed(2)}, D=${e.kD.toFixed(2)}`)}const s=t.querySelector(".info-message");if(e.message)if(s)s.textContent=e.message;else{const n=document.createElement("div");n.className="info-message",n.textContent=e.message,t.querySelector(".controller-info-row").insertAdjacentElement("afterend",n)}else s&&s.remove()}function createControllerCard(e){const t=document.createElement("div");t.className="controller-card",t.setAttribute("data-index",e.index);const n=e.fault?"status-fault":e.enabled?"status-online":"status-offline",o=e.fault?"FAULT":e.enabled?"ENABLED":"DISABLED";return t.innerHTML=`\n        <div class="output-header">\n            <div class="output-header-left">\n                <span class="output-name">[${e.index}] ${e.name}</span>\n            </div>\n            <div class="output-header-right">\n                <div class="device-status ${n}">${o}</div>\n                <span class="dashboard-icon ${e.showOnDashboard?"active":"inactive"}" title="${e.showOnDashboard?"Shown on Dashboard":"Hidden from Dashboard"}">\n                    ${getDashboardIconSVG()}\n                </span>\n                <button class="icon-btn" onclick="openControllerConfig(${e.index})" title="Configure">\n                    ${getConfigIconSVG()}\n                </button>\n            </div>\n        </div>\n        \n        <div class="controller-values">\n            <div class="controller-value-item">\n                <div class="controller-value-label">Process Value</div>\n                <div class="controller-value-display">${null!==e.processValue?e.processValue.toFixed(1):"--"}${e.unit}</div>\n            </div>\n            <div class="controller-value-item">\n                <div class="controller-value-label">Setpoint</div>\n                <div class="controller-value-display">${e.setpoint.toFixed(1)}${e.unit}</div>\n            </div>\n            <div class="controller-value-item">\n                <div class="controller-value-label">Output</div>\n                <div class="controller-value-display">${null!==e.output?0===e.controlMethod?e.output>0?"ON":"OFF":e.output.toFixed(0)+"%":"--"}</div>\n            </div>\n        </div>\n        \n        <div class="controller-info-row">\n            <span><strong>Mode:</strong> ${0===e.controlMethod?"On/Off":"PID"}</span>\n            ${1===e.controlMethod?`\n                <span id="ctrl-gains-${e.index}"><strong>Gains:</strong> P=${e.kP.toFixed(2)}, I=${e.kI.toFixed(2)}, D=${e.kD.toFixed(2)}</span>\n            `:`\n                <span><strong>Hysteresis:</strong> ${e.hysteresis}${e.unit}</span>\n            `}\n        </div>\n        \n        ${e.message?`<div class="info-message">${e.message}</div>`:""}\n        \n        <div class="controller-setpoint-control">\n            <label>Setpoint:</label>\n            <input type="number" \n                   id="ctrl-setpoint-${e.index}" \n                   value="${e.setpoint}" \n                   step="0.1" \n                   onfocus="focusedControllerSetpoints.add(${e.index})"\n                   onblur="focusedControllerSetpoints.delete(${e.index})">\n            <span class="unit-label">${e.unit}</span>\n            <button class="output-btn output-btn-primary" \n                    onclick="updateControllerSetpoint(${e.index})">\n                Update\n            </button>\n        </div>\n        \n        <div class="controller-button-group">\n            <button class="output-btn ${e.enabled?"output-btn-secondary":"output-btn-success"}" \n                    onclick="${e.enabled?"disableController":"enableController"}(${e.index})">\n                ${e.enabled?"Disable":"Enable"}\n            </button>\n            ${1===e.controlMethod?`\n                <button class="output-btn output-btn-warning" \n                        onclick="startAutotune(${e.index})"\n                        ${e.tuning?"disabled":""}>\n                    ${e.tuning?"Tuning...":"Autotune"}\n                </button>\n                <button id="save-pid-btn-${e.index}" \n                        class="output-btn output-btn-success" \n                        onclick="savePIDValues(${e.index})"\n                        ${autotuneJustCompleted.get(e.index)?"":"disabled"}>\n                    Save PID Values\n                </button>\n            `:""}\n        </div>\n    `,t}function openAddControllerModal(){const e=document.getElementById("addControllerModal");if(!e)return;document.getElementById("controllerType").value="",selectedControllerType=null;const t=document.getElementById("controllerExpandedFields");t&&t.remove(),e.style.display="flex",e.classList.add("active")}function closeAddControllerModal(){const e=document.getElementById("addControllerModal");e&&(e.style.display="none",e.classList.remove("active"))}async function updateSensorOptions(){const e=document.getElementById("controllerType"),t=parseInt(e.value);if(isNaN(t)){selectedControllerType=null;const e=document.getElementById("controllerExpandedFields");return void(e&&e.remove())}selectedControllerType=Object.values(CONTROLLER_TYPES).find(e=>e.value===t),console.log("[CONTROLLERS] Selected type:",selectedControllerType?.name);const n=await loadAvailableSensors(),o=await loadAvailableOutputs(),a=selectedControllerType.indices.filter(e=>!controllersData.find(t=>t.index===e));if(0===a.length)return showToast("warning","No Slots Available",`All ${selectedControllerType.name} slots are in use`),e.value="",void(selectedControllerType=null);const s=document.getElementById("controllerExpandedFields");s&&s.remove();const r=document.querySelector("#addControllerModal .config-form"),i=document.createElement("div");i.id="controllerExpandedFields",i.innerHTML=`\n        <hr style="margin: 20px 0; border: none; border-top: 1px solid #dee2e6;">\n        \n        <div class="form-group">\n            <label for="ctrlName">Name:</label>\n            <input type="text" id="ctrlName" value="${selectedControllerType.name} ${a[0]}" maxlength="39">\n        </div>\n        \n        <div class="form-group">\n            <label>\n                <input type="checkbox" id="ctrlShowDashboard">\n                Show on Dashboard\n            </label>\n        </div>\n        \n        <div class="form-group">\n            <label for="ctrlTempSensor">Temperature Sensor:</label>\n            <select id="ctrlTempSensor">\n                <option value="">-- Select Sensor --</option>\n                ${n.map(e=>`<option value="${e.index}">${e.name}</option>`).join("")}\n            </select>\n        </div>\n        \n        <div class="form-group">\n            <label for="ctrlOutput">Heater Output:</label>\n            <select id="ctrlOutput">\n                <option value="">-- Select Output --</option>\n                ${o.map(e=>`<option value="${e.index}">${e.name}</option>`).join("")}\n            </select>\n        </div>\n        \n        <div class="form-group">\n            <label for="ctrlMode">Control Mode:</label>\n            <select id="ctrlMode" onchange="toggleControlModeFields()">\n                <option value="0">On/Off</option>\n                <option value="1">PID</option>\n            </select>\n        </div>\n        \n        <div id="onOffParams">\n            <div class="form-group">\n                <label for="ctrlHysteresis">Hysteresis (Â°C):</label>\n                <input type="number" id="ctrlHysteresis" value="0.5" step="0.1" min="0.1">\n            </div>\n        </div>\n        \n        <div id="pidParams" style="display: none;">\n            <div class="form-group">\n                <label for="ctrlKp">Proportional Gain (kP):</label>\n                <input type="number" id="ctrlKp" value="2.0" step="0.1">\n            </div>\n            <div class="form-group">\n                <label for="ctrlKi">Integral Gain (kI):</label>\n                <input type="number" id="ctrlKi" value="0.5" step="0.01">\n            </div>\n            <div class="form-group">\n                <label for="ctrlKd">Derivative Gain (kD):</label>\n                <input type="number" id="ctrlKd" value="0.1" step="0.01">\n            </div>\n            <div class="form-group">\n                <label for="ctrlWindup">Integral Windup Limit:</label>\n                <input type="number" id="ctrlWindup" value="100.0" step="1">\n            </div>\n            <div class="form-group">\n                <label for="ctrlOutMin">Output Min (%):</label>\n                <input type="number" id="ctrlOutMin" value="0" step="1" min="0" max="100">\n            </div>\n            <div class="form-group">\n                <label for="ctrlOutMax">Output Max (%):</label>\n                <input type="number" id="ctrlOutMax" value="100" step="1" min="0" max="100">\n            </div>\n        </div>\n        \n        <div class="form-group">\n            <label for="ctrlSetpoint">Initial Setpoint (Â°C):</label>\n            <input type="number" id="ctrlSetpoint" value="25.0" step="0.1">\n        </div>\n    `,r.appendChild(i)}async function createController(){if(!selectedControllerType)return void showToast("warning","Selection Required","Please select a controller type");const e=selectedControllerType.indices.filter(e=>!controllersData.find(t=>t.index===e));if(0===e.length)return void showToast("warning","No Slots Available",`All ${selectedControllerType.name} slots are in use`);const t=e[0],n={isActive:!0,name:document.getElementById("ctrlName").value,showOnDashboard:document.getElementById("ctrlShowDashboard").checked,unit:"C",pvSourceIndex:parseInt(document.getElementById("ctrlTempSensor").value),outputIndex:parseInt(document.getElementById("ctrlOutput").value),controlMethod:parseInt(document.getElementById("ctrlMode").value),setpoint:parseFloat(document.getElementById("ctrlSetpoint").value),hysteresis:parseFloat(document.getElementById("ctrlHysteresis").value),kP:parseFloat(document.getElementById("ctrlKp").value),kI:parseFloat(document.getElementById("ctrlKi").value),kD:parseFloat(document.getElementById("ctrlKd").value),integralWindup:parseFloat(document.getElementById("ctrlWindup").value),outputMin:parseFloat(document.getElementById("ctrlOutMin").value),outputMax:parseFloat(document.getElementById("ctrlOutMax").value),enabled:!1};if(n.name)if(n.pvSourceIndex)if(n.outputIndex)try{console.log(`[CONTROLLERS] Creating controller at index ${t}`,n);const e=await fetch(`/api/controller/${t}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)});if(!e.ok){const t=await e.json().catch(()=>({}));throw new Error(t.error||"Failed to create controller")}showToast("success","Success","Controller created successfully"),closeAddControllerModal(),await loadControllers()}catch(e){console.error("[CONTROLLERS] Error creating:",e),showToast("error","Error",e.message)}else showToast("warning","Validation Error","Please select a heater output");else showToast("warning","Validation Error","Please select a temperature sensor");else showToast("warning","Validation Error","Please enter a name")}async function openControllerConfig(e){currentConfigIndex=e,console.log(`[CONTROLLERS] Opening config for controller ${e}`);try{const t=await fetch(`/api/controller/${e}`);if(!t.ok)throw new Error("Failed to load config");const n=await t.json();await renderConfigForm(n);const o=document.getElementById("controllerConfigModal");o.style.display="flex",o.classList.add("active")}catch(e){console.error("[CONTROLLERS] Error loading config:",e),showToast("error","Error","Failed to load controller configuration")}}function closeControllerConfigModal(){const e=document.getElementById("controllerConfigModal");e&&(e.style.display="none",e.classList.remove("active")),currentConfigIndex=null}async function renderConfigForm(e){const t=document.getElementById("controllerConfigContent");if(!t)return;const n=await loadAvailableSensors(),o=await loadAvailableOutputs(),a=e.controlMethod||0;t.innerHTML=`\n        <div class="form-group">\n            <label for="ctrlName">Name:</label>\n            <input type="text" id="ctrlName" value="${e.name||""}" maxlength="39">\n        </div>\n        \n        <div class="form-group">\n            <label>\n                <input type="checkbox" id="ctrlShowDashboard" ${e.showOnDashboard?"checked":""}>\n                Show on Dashboard\n            </label>\n        </div>\n        \n        <div class="form-group">\n            <label for="ctrlTempSensor">Temperature Sensor:</label>\n            <select id="ctrlTempSensor">\n                <option value="">-- Select Sensor --</option>\n                ${n.map(t=>`<option value="${t.index}" ${e.pvSourceIndex===t.index?"selected":""}>${t.name}</option>`).join("")}\n            </select>\n        </div>\n        \n        <div class="form-group">\n            <label for="ctrlOutput">Heater Output:</label>\n            <select id="ctrlOutput">\n                <option value="">-- Select Output --</option>\n                ${o.map(t=>`<option value="${t.index}" ${e.outputIndex===t.index?"selected":""}>${t.name}</option>`).join("")}\n            </select>\n        </div>\n        \n        <div class="form-group">\n            <label for="ctrlMode">Control Mode:</label>\n            <select id="ctrlMode" onchange="toggleControlModeFields()">\n                <option value="0" ${0===a?"selected":""}>On/Off</option>\n                <option value="1" ${1===a?"selected":""}>PID</option>\n            </select>\n        </div>\n        \n        <div id="onOffParams" style="display: ${0===a?"block":"none"};">\n            <div class="form-group">\n                <label for="ctrlHysteresis">Hysteresis (Â°C):</label>\n                <input type="number" id="ctrlHysteresis" value="${e.hysteresis||.5}" step="0.1" min="0.1">\n            </div>\n        </div>\n        \n        <div id="pidParams" style="display: ${1===a?"block":"none"};">\n            <div class="form-group">\n                <label for="ctrlKp">Proportional Gain (kP):</label>\n                <input type="number" id="ctrlKp" value="${e.kP||2}" step="0.1">\n            </div>\n            <div class="form-group">\n                <label for="ctrlKi">Integral Gain (kI):</label>\n                <input type="number" id="ctrlKi" value="${e.kI||.5}" step="0.01">\n            </div>\n            <div class="form-group">\n                <label for="ctrlKd">Derivative Gain (kD):</label>\n                <input type="number" id="ctrlKd" value="${e.kD||.1}" step="0.01">\n            </div>\n            <div class="form-group">\n                <label for="ctrlWindup">Integral Windup Limit:</label>\n                <input type="number" id="ctrlWindup" value="${e.integralWindup||100}" step="1">\n            </div>\n            <div class="form-group">\n                <label for="ctrlOutMin">Output Min (%):</label>\n                <input type="number" id="ctrlOutMin" value="${e.outputMin||0}" step="1" min="0" max="100">\n            </div>\n            <div class="form-group">\n                <label for="ctrlOutMax">Output Max (%):</label>\n                <input type="number" id="ctrlOutMax" value="${e.outputMax||100}" step="1" min="0" max="100">\n            </div>\n        </div>\n        \n        <div class="form-group">\n            <label for="ctrlSetpoint">Initial Setpoint (Â°C):</label>\n            <input type="number" id="ctrlSetpoint" value="${e.setpoint||25}" step="0.1">\n        </div>\n    `}function toggleControlModeFields(){const e=parseInt(document.getElementById("ctrlMode").value);document.getElementById("onOffParams").style.display=0===e?"block":"none",document.getElementById("pidParams").style.display=1===e?"block":"none"}async function loadAvailableSensors(){const e=[];try{const t=await fetch("/api/inputs");if(!t.ok)return e;const n=await t.json();n.rtd&&n.rtd.forEach(t=>{e.push({index:t.i,name:`[${t.i}] ${t.n} (${t.v.toFixed(1)}${t.u})`})}),n.deviceSensors&&n.deviceSensors.forEach(t=>{t.n.toLowerCase().includes("temp")&&e.push({index:t.i,name:`[${t.i}] ${t.n}`})})}catch(e){console.error("[CONTROLLERS] Error loading sensors:",e)}return e}async function loadAvailableOutputs(){const e=[];try{const t=await fetch("/api/outputs");if(!t.ok)return e;const n=await t.json();n.digitalOutputs&&n.digitalOutputs.forEach(t=>{e.push({index:t.index,name:`[${t.index}] ${t.name}`})})}catch(e){console.error("[CONTROLLERS] Error loading outputs:",e)}return e}async function saveControllerConfig(){if(null===currentConfigIndex)return;const e={isActive:!0,name:document.getElementById("ctrlName").value,showOnDashboard:document.getElementById("ctrlShowDashboard").checked,unit:"C",pvSourceIndex:parseInt(document.getElementById("ctrlTempSensor").value),outputIndex:parseInt(document.getElementById("ctrlOutput").value),controlMethod:parseInt(document.getElementById("ctrlMode").value),setpoint:parseFloat(document.getElementById("ctrlSetpoint").value),hysteresis:parseFloat(document.getElementById("ctrlHysteresis").value),kP:parseFloat(document.getElementById("ctrlKp").value),kI:parseFloat(document.getElementById("ctrlKi").value),kD:parseFloat(document.getElementById("ctrlKd").value),integralWindup:parseFloat(document.getElementById("ctrlWindup").value),outputMin:parseFloat(document.getElementById("ctrlOutMin").value),outputMax:parseFloat(document.getElementById("ctrlOutMax").value),enabled:!1};if(e.name)if(e.pvSourceIndex)if(e.outputIndex)try{const t=await fetch(`/api/controller/${currentConfigIndex}`,{method:"PUT",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok){const e=await t.json().catch(()=>({}));throw new Error(e.error||"Failed to save configuration")}showToast("success","Success","Controller configuration saved"),closeControllerConfigModal(),await loadControllers()}catch(e){console.error("[CONTROLLERS] Error saving:",e),showToast("error","Error",e.message)}else showToast("warning","Validation Error","Please select a heater output");else showToast("warning","Validation Error","Please select a temperature sensor");else showToast("warning","Validation Error","Please enter a name")}async function deleteController(){if(null!==currentConfigIndex&&confirm("Are you sure you want to delete this controller?"))try{if(!(await fetch(`/api/controller/${currentConfigIndex}`,{method:"DELETE"})).ok)throw new Error("Failed to delete controller");showToast("success","Success","Controller deleted"),closeControllerConfigModal(),await loadControllers()}catch(e){console.error("[CONTROLLERS] Error deleting:",e),showToast("error","Error","Failed to delete controller")}}async function updateControllerSetpoint(e){const t=document.getElementById(`ctrl-setpoint-${e}`);if(!t)return;const n=parseFloat(t.value);try{if(!(await fetch(`/api/controller/${e}/setpoint`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({setpoint:n})})).ok)throw new Error("Failed to update setpoint");console.log(`[CONTROLLERS] Updated setpoint for ${e} to ${n}`),showToast("success","Success","Setpoint updated")}catch(e){console.error("[CONTROLLERS] Error updating setpoint:",e),showToast("error","Error","Failed to update setpoint")}}async function enableController(e){try{if(!(await fetch(`/api/controller/${e}/enable`,{method:"POST"})).ok)throw new Error("Failed to enable controller");console.log(`[CONTROLLERS] Enabled controller ${e}`),showToast("success","Success","Controller enabled"),await loadControllers()}catch(e){console.error("[CONTROLLERS] Error enabling:",e),showToast("error","Error","Failed to enable controller")}}async function disableController(e){try{if(!(await fetch(`/api/controller/${e}/disable`,{method:"POST"})).ok)throw new Error("Failed to disable controller");console.log(`[CONTROLLERS] Disabled controller ${e}`),showToast("success","Success","Controller disabled"),await loadControllers()}catch(e){console.error("[CONTROLLERS] Error disabling:",e),showToast("error","Error","Failed to disable controller")}}async function startAutotune(e){try{if(!(await fetch(`/api/controller/${e}/autotune`,{method:"POST"})).ok)throw new Error("Failed to start autotune");console.log(`[CONTROLLERS] Started autotune for ${e}`),showToast("info","Autotune","PID autotune started - this may take several minutes"),autotuneJustCompleted.set(e,!1),await loadControllers()}catch(e){console.error("[CONTROLLERS] Error starting autotune:",e),showToast("error","Error","Failed to start autotune")}}async function savePIDValues(e){try{const t=controllersData.find(t=>t.index===e);if(!t)throw new Error("Controller not found");const n=await fetch(`/api/config/tempcontroller/${e}`);if(!n.ok)throw new Error("Failed to load current configuration");const o=await n.json();o.kP=t.kP,o.kI=t.kI,o.kD=t.kD;if(!(await fetch(`/api/config/tempcontroller/${e}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)})).ok)throw new Error("Failed to save PID values");console.log(`[CONTROLLERS] Saved PID values for controller ${e}: P=${t.kP}, I=${t.kI}, D=${t.kD}`),showToast("success","PID Values Saved",`New gains: P=${t.kP}, I=${t.kI}, D=${t.kD}`),autotuneJustCompleted.set(e,!1),await loadControllers()}catch(e){console.error("[CONTROLLERS] Error saving PID values:",e),showToast("error","Error","Failed to save PID values")}}window.addEventListener("beforeunload",()=>{controllersPolling&&(clearInterval(controllersPolling),controllersPolling=null)}),window.openAddControllerModal=openAddControllerModal,window.closeAddControllerModal=closeAddControllerModal,window.updateSensorOptions=updateSensorOptions,window.createController=createController,window.openControllerConfig=openControllerConfig,window.closeControllerConfigModal=closeControllerConfigModal,window.saveControllerConfig=saveControllerConfig,window.deleteController=deleteController,window.toggleControlModeFields=toggleControlModeFields,window.updateControllerSetpoint=updateControllerSetpoint,window.enableController=enableController,window.disableController=disableController,window.startAutotune=startAutotune,window.savePIDValues=savePIDValues;